* emacs
** archives and startup
#+BEGIN_SRC emacs-lisp
  (setq INDEX-CHIAROSCURO 0)
  (setq iterations 1)
  (setq mode-line-fringe t)

  ;(setq warning-minimum-level :emergency)

  (package-initialize)

  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("elpa" . "https://elpa.gnu.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")))

  (unless package-archive-contents (package-refresh-contents))

  (setq package-list '(ace-window
                       ;ag
                       ;arduino-cli-mode
                       ;arduino-mode
                       ;bookmark-in-project
                       ;chess
                       ;clang-format
                       company
                       ;company-box
                       counsel
                       counsel-projectile
                       ;counsel-web
                       ;diminish
                       ;dired-narrow
                       ;eglot
                       ;eglot-java
                       elfeed
                       engine-mode
                       evil
                       ;evil-mc
                       ;focus
                       ;git-gutter
                       ;gnuplot
                       ;go-mode
                       ;golden-ratio
                       google-translate
                       ;goto-last-change
                       ;helm-bm
                       helm-projectile
                       helm-swoop
                       ;hide-mode-line
                       ;highlight
                       ;ibuffer-vc
                       ;itail
                       ;ivy
                       ;json-mode
                       ;luwak
                       ;magit
                       ;magit-find-file
                       ;move-text
                       ;nov
                       ;olivetti
                       ;openwith
                       ;ox-jira
                       ;powershell
                       ;projectile
                       ;rainbow-mode
                       ;swiper-helm
                       ;treemacs-projectile
                       ;use-package
                       ;visual-regexp
                       which-key
                       ;xterm-color
                       ;ztree
                       ))

  (dolist (package package-list)
    (unless (package-installed-p package) (package-install package)))
#+END_SRC
** behavior
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-<down>") 'scroll-up-line)
  (global-set-key (kbd "C-<up>") 'scroll-down-line)

  (setq make-backup-files nil)

  (global-set-key (kbd "M-o") 'ace-window)

  (setq ring-bell-function 'ignore)

  (global-set-key (kbd "C-x q") 'goto-last-change)

  (show-paren-mode t)
  (setq show-paren-style 'parenthesis)

  (setq-default truncate-lines t)

  (add-hook 'c-mode-common-hook
	    (lambda () (subword-mode t)))
  (add-hook 'java-mode-common-hook
	    (lambda () (subword-mode t)))

  (setq sentence-end-double-space nil)

  (whitespace-mode -1)

  (setq compile-command "mvn install")
#+END_SRC
** chess
#+BEGIN_SRC emacs-lisp
  (setq chess-images-directory "~/source/emacs/xboard/")
  (setq chess-images-default-size 75)
#+END_SRC
** company
#+BEGIN_SRC emacs-lisp
  ;(add-hook 'after-init-hook 'global-company-mode)
#+END_SRC
** counsel-projectile
#+BEGIN_SRC emacs-lisp
  (require 'counsel-projectile)
  (use-package counsel-projectile)
  (counsel-projectile-mode t)
#+END_SRC
** custom functions
#+BEGIN_SRC emacs-lisp
  (defun my:duplicate-line ()
    "Duplicate line at point."
    (interactive)
    (move-beginning-of-line 1)
    (kill-line)
    (yank)
    (open-line 1)
    (next-line 1)
    (yank))
  (global-set-key (kbd "C-x d") 'my:duplicate-line)

  (defun my:copy-line-at-point ()
    "Copy line at point."
    (interactive)
    (save-excursion
      (let ((begin (line-beginning-position))
            (end (line-end-position)))
        (copy-region-as-kill begin end))))
  (global-set-key (kbd "C-c y") 'my:copy-line-at-point)

  (defun my:trim-whitespace ()
    "Trim whitespace."
    (interactive)
    (save-excursion
      (let ((begin (line-beginning-position))
            (end (line-end-position)))
        (whitespace-cleanup-region begin end))))
  (global-set-key (kbd "C-x t") 'my:trim-whitespace)

  (defvar java-function-regexp
    (concat
     "^[ \t]*"                                   ;; leading white space
     "\\(public\\|private\\|protected\\|"        ;; some of these 8 keywords
     "abstract\\|final\\|static\\|"
     "synchronized\\|native"
     "\\|override"                               ;; C# support
     "\\|[ \t\n\r]\\)*"                          ;; or whitespace
     "[a-zA-Z0-9_$]+"                            ;; return type
     "[ \t\n\r]*[[]?[]]?"                        ;; (could be array)
     "[ \t\n\r]+"                                ;; whitespace
     "\\([a-zA-Z0-9_$]+\\)"                      ;; the name we want!
     "[ \t\n\r]*"                                ;; optional whitespace
     "("                                         ;; open the param list
     "\\([ \t\n\r]*"                             ;; optional whitespace
     "\\<[a-zA-Z0-9_$]+\\>"                      ;; typename
     "[ \t\n\r]*[[]?[]]?"                        ;; (could be array)
     "[ \t\n\r]+"                                ;; whitespace
     "\\<[a-zA-Z0-9_$]+\\>"                      ;; variable name
     "[ \t\n\r]*[[]?[]]?"                        ;; (could be array)
     "[ \t\n\r]*,?\\)*"                          ;; opt whitespace and comma
     "[ \t\n\r]*"                                ;; optional whitespace
     ")"                                         ;; end the param list
     ))

  (defun my:next-java-method ()
    "Jump to next Java method."
    (interactive)
    (re-search-forward java-function-regexp nil t)
    (recenter))

  (defun my:prev-java-method ()
    "Jump to previous Java method."
    (interactive)
    (re-search-backward java-function-regexp nil t)
    (recenter))

  ;(defvar next-method-regexp "\\(class\\|def\\|public\\|private\\|protected\\|defun\\|defvar\\|[a-zA-Z0-9_$]+(\\)")
  ;(defvar next-method-regexp "class\\|def\\|public\\|private\\|protected\\|defun\\|defvar")
  (defvar next-method-regexp "class\\|def\\|public\\|private\\|protected\\|defun\\|defvar")
  ;(defvar next-method-regexp "public")

  (defun my:prev-method ()
    (interactive)
    (re-search-backward next-method-regexp nil t))
  (global-set-key (kbd "C-3") 'my:prev-method)

  (defun my:next-method ()
    (interactive)
    (re-search-forward next-method-regexp nil t))
  (global-set-key (kbd "C-4") 'my:next-method)

  (defun my:previous-link-center ()
    (interactive)
    (Info-prev-reference)
    (recenter))

  (defun my:next-link-center ()
    (interactive)
    (Info-next-reference)
    (recenter))

  (defun my:agenda-view ()
    (interactive)
    (org-agenda t "a")
    (org-agenda-day-view)
    (delete-other-windows)
    (org-agenda-redo-all))

  (defun my:replace-umlauts ()
    (interactive)
    (beginning-of-buffer)
    (while (search-forward "ae" nil t)
      (replace-match "ä" nil t))
    (beginning-of-buffer)
    (while (search-forward "oe" nil t)
      (replace-match "ö" nil t))
    (beginning-of-buffer)
    (while (search-forward "ue" nil t)
      (replace-match "ü" nil t)))

  (defun my:umlaut-a ()
    (interactive)
    (insert "ä"))
  (global-set-key (kbd "C-c k a") 'my:umlaut-a)

  (defun my:umlaut-o ()
    (interactive)
    (insert "ö"))
  (global-set-key (kbd "C-c k o") 'my:umlaut-o)

  (defun my:umlaut-u ()
    (interactive)
    (insert "ü"))
  (global-set-key (kbd "C-c k u") 'my:umlaut-u)

  (defun my:umlaut-s ()
    (interactive)
    (insert "ß"))
  (global-set-key (kbd "C-c k s") 'my:umlaut-s)

  (defun my:get-filename ()
    (interactive)
    (dired-jump)
    (dired-copy-filename-as-kill)
    (kill-this-buffer))
  (global-set-key (kbd "C-x y") 'my:get-filename)

  (defun my:projectile-magit ()
    (interactive)
    (projectile-vc)
    (delete-other-windows))
  (global-set-key (kbd "C-c v") 'my:projectile-magit)

  (defun my:magit-log ()
    (interactive)
    (magit-log-current nil nil nil)
    (delete-other-windows))
  (global-set-key (kbd "C-c L") 'my:magit-log)

  (defun my:new-line ()
    (interactive)
    (move-end-of-line nil)
    (newline)
    (c-indent-line-or-region))
  (global-set-key (kbd "C-c n") 'my:new-line)

  (defun my:toggle-mode-line-fringe ()
    "Toggle mode line and fringe."
    (interactive)
    (if (eq mode-line-fringe t)
        (progn
          (setq mode-line-fringe -1))
      (progn
        (setq mode-line-fringe t)))

    (if (eq mode-line-fringe t)
        (global-hide-mode-line-mode -1)
      (global-hide-mode-line-mode t))
    (my:toggle-fringe))

  (global-set-key (kbd "C-{") 'my:toggle-mode-line-fringe)

  (defun my:toggle-fringe ()
    (if (eq mode-line-fringe -1)
      (progn (fringe-mode '(0 . 0))
             (setq my:fringe 0))
      (progn (fringe-mode '(20 . 20))
             (setq my:fringe 1))))

  (defun my:start-screen ()
    (interactive)
    (my:agenda-view)
    (org-agenda-redo-all)
    (split-window-below)
    (my:show-projects))

  (defun my:show-projects ()
    (interactive)
    (switch-to-buffer "*projects*")
    (mark-whole-buffer)
    (cua-delete-region)
    (org-mode)
    (insert "#+TITLE: Projects\n\n")
    (dolist (project (projectile-relevant-known-projects))
      (insert (concat "* " " [[" project "]] " "\n")))
    (goto-char (point-min)))

  (defun my:dired-projectile-main-folder ()
    (projectile-dired))

  (defun my:dired-projectile-search (regexp search-in-subdirs)
    (interactive "sRegexp: \nP")
    (my:dired-projectile-main-folder)
    (message regexp)
    (dired-do-find-regexp regexp)
    (delete-other-windows))

  (defun my:vc-git-grep ()
    "my:vc-git-grep"
    (interactive)
    (my:dired-projectile-main-folder)
    (vc-git-grep (read-from-minibuffer "Search for: ")
      "\*"
      "\*"))

  (defun my:helm-projectile-grep ()
    "my:helm-projectile-grep"
    (interactive)
    (helm-projectile-grep))

  (defun my:reset-font-size ()
    (interactive)
    (setq font-size default-font-size)
    (set-face-attribute 'default nil :height font-size))
  (global-set-key (kbd "C-S-o") 'my:reset-font-size)

  (defun my:decrease-font-size ()
    (interactive)
    (setq font-size (- font-size 20))
    (set-face-attribute 'default nil :height font-size))
  (global-set-key (kbd "C-!") 'my:decrease-font-size)

  (defun my:increase-font-size ()
    (interactive)
    (setq font-size (+ font-size 20))
    (set-face-attribute 'default nil :height font-size))
  (global-set-key (kbd "C-@") 'my:increase-font-size)

  (defun my:avy-goto-line ()
    (interactive)
    (avy-goto-line)
    (evil-first-non-blank))
  (global-set-key (kbd "C-t") 'my:avy-goto-line)
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (add-hook 'dired-mode-hook
	    (lambda ()
	      (define-key dired-mode-map (kbd "b")
			  (lambda () (interactive) (find-alternate-file "..")))))

  (use-package dired-narrow
    :ensure t
    :config
    (bind-key "C-c s" #'dired-narrow-fuzzy))
  (require 'dired-narrow)

  (setq dired-dwim-target t)
#+END_SRC
** ediff
#+BEGIN_SRC emacs-lisp
  (setq ediff-split-window-function 'split-window-horizontally)
#+END_SRC
** elfeed
#+BEGIN_SRC emacs-lisp
  (require 'elfeed)
  (setq elfeed-feeds '(
                       ("https://rss.orf.at/news.xml" news orf)
                       ("https://rss.orf.at/steiermark.xml" news orf steiermark)
                       ("https://sachachua.com/blog/category/emacs-news/feed/" emacs)
                       ("https://www.comicsrss.com/rss/dilbert.rss" comics dilbert)
                       ("https://www.comicsrss.com/rss/dilbert-classics.rss" comics dilbert classics)
                       ("https://www.comicsrss.com/rss/eek.rss" comics eek)
                       ("https://www.comicsrss.com/rss/garfield-classics.rss" comics garfield classics)
                       ("https://www.comicsrss.com/rss/garfield.rss" comics garfield)
                       ("https://www.comicsrss.com/rss/peanuts.rss" comics peanuts)
  ))
#+END_SRC
** engine mode
#+BEGIN_SRC emacs-lisp
  (require 'engine-mode)
  (engine-mode t)

  (defengine google
    "http://www.google.com/search?ie=utf-8&oe=utf-8&q=%s"
    :keybinding "g")

  (defengine stack-overflow
    "https://stackoverflow.com/search?q=%s"
    :keybinding "s")

  (defengine wikipedia
    "http://www.wikipedia.org/search-redirect.php?language=en&go=Go&search=%s"
    :keybinding "w")
#+END_SRC
** environment setup
Load environment variables properly by installing *exec-path-from-shell*.
#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell :ensure t)
  (exec-path-from-shell-initialize)
#+END_SRC
** evil
#+BEGIN_SRC emacs-lisp
  (use-package evil)
  (require 'evil)
  (evil-mode nil)

  (setq evil-default-state 'emacs)
#+END_SRC
** eww
#+BEGIN_SRC emacs-lisp
  (setq eww-search-prefix "https://www.google.com/search?q=")

  ;(setq browse-url-browser-function 'eww-browse-url) ; Use eww as the default browser
  (setq shr-use-fonts  nil) ; No special fonts
  (setq shr-use-colors nil) ; No colors
  (setq shr-indentation 2) ; Left-side margin
  (setq shr-width 80) ; Fold text
  (setq shr-max-image-proportion 0.3) ; Image size

  (cond
    ((string-equal system-type "windows-nt")
      (progn (setq browse-url-browser-function 'browse-url-generic browse-url-generic-program "C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe") (message "windows-nt")))
    ((string-equal system-type "gnu/linux")
      (progn (setq browse-url-browser-function 'browse-url-generic browse-url-generic-program "google-chrome") (message "linux"))))
#+END_SRC
** google-translate
#+BEGIN_SRC emacs-lisp
  (require 'google-translate)
  (require 'google-translate-default-ui)
  (global-set-key (kbd "C-c P") 'google-translate-at-point)
  (global-set-key (kbd "C-c T") 'google-translate-query-translate)
  (global-set-key (kbd "C-c R") 'google-translate-query-translate-reverse)
  (setq google-translate-default-source-language "fr")
  (setq google-translate-default-target-language "en")
#+END_SRC
** helm
#+BEGIN_SRC emacs-lisp
  (use-package helm
    :ensure t
    :init
    (helm-mode t)
    (progn (setq helm-buffers-fuzzy-matching t))
    :bind
    (("M-x" . helm-M-x))
    (("C-c k r" . helm-show-kill-ring))
    (("C-c h" . helm-grep-do-git-grep))
    (("C-c g" . helm-projectile-grep))
    (("C-r"   . helm-swoop))
    (("C-c b" . helm-buffers-list))
    (("C-c r" . helm-bookmarks))
    (("C-c i" . helm-mini))
    (("C-c q" . helm-info)))
#+END_SRC
** helm-projectile
#+BEGIN_SRC emacs-lisp
  (require 'helm-projectile)
  (helm-projectile-on)
#+END_SRC
** swiper
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-s") 'swiper)
  (global-set-key (kbd "M-s a") 'swiper-all)
#+END_SRC
** Yasnippet
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :config (yas-global-mode))
  (use-package yasnippet-snippets
    :ensure t)
  (setq yas-snippet-dirs '("~/.emacs.d/snippets"))
  (global-set-key (kbd "C-c j") 'yas-insert-snippet)
#+END_SRC
** hydra code
#+BEGIN_SRC emacs-lisp
  (defhydra hydra-code (:hint nil :color red)

    "
  Code

  ^LSP^             ^Git^           ^Search^              ^Project^   ^Diff^            ^Build^
  ^^^^^-------------------------------------------------------------------------------------------------
  _!_: Lsp on       _g_: status     _1_: dired project    _p_: root   _E_: buffers      _-_: compile
  _@_: Lsp off      _l_: log        _2_: vc-git-grep      _f_: files  _A_: directories  _=_: lsp
  _#_: Eglot on     _L_: log file   _3_: helm-projectile  ^ ^         _n_: branches     ^ ^
  _$_: Eglot off    _b_: blame      _4_: helm-git-grep    ^ ^         _m_: magit-diff   ^ ^
  _%_: Company on   _B_: region     _5_: buffers          ^ ^         ^ ^               ^ ^
  _&_: Company off  ^ ^             ^ ^                   ^ ^         ^ ^               ^ ^
  "

    ("!" (my:lsp-on))
    ("@" (my:lsp-off))
    ("#" (my:eglot-on))
    ("$" (my:eglot-off))
    ("%" (my:company-on))
    ("&" (my:company-off))

    ("g" (my:projectile-magit))
    ("l" (magit-log))
    ("L" (magit-log-buffer-file))
    ("b" (magit-blame))
    ("B" (magit-file-dispatch))

    ("1" my:dired-projectile-search)
    ("2" my:vc-git-grep)
    ("3" my:helm-projectile-grep)
    ("4" helm-grep-do-git-grep)
    ("5" swiper-all)

    ("p" (project-dired))
    ("f" (counsel-projectile))

    ("E" ediff-buffers)
    ("A" ediff-directories)
    ("n" magit-diff-range)
    ("m" magit-diff)

    ("-" compile)
    ("=" lsp-java-build-project)

    ("q" nil "Quit" :color blue))
#+END_SRC
** hydra emacs
#+BEGIN_SRC emacs-lisp
  (defhydra hydra-emacs (:hint nil :color red)

    "
  Emacs

  ^Folders^        ^Files^             ^Update^             ^Themes^                 ^Buffers^
  ^^^^^^^^-------------------------------------------------------------------------------------------------
  _a_: emacs       _d_: emacs.org      _h_: cp .emacs.d     _k_: reset   _1_: Console  _'_: ibuffers
  _s_: .emacs.d    _f_: chiaro...el    _j_: fullscreen      _l_: up      _2_: Eclipse  ^ ^
  ^ ^              _g_: linux.el       ^ ^                  _;_: down    _3_: Neon     ^ ^
  ^ ^              ^ ^                 ^ ^                  ^ ^          _4_: Yellow   ^ ^
  ^ ^              ^ ^                 ^ ^                  ^ ^          _5_: Red      ^ ^
  ^ ^              ^ ^                 ^ ^                  ^ ^          _6_: High C.  ^ ^
  "

    ("a" (dired "~/source/emacs"))
    ("s" (dired "~/.emacs.d"))

    ("d" (find-file "~/source/emacs/emacs.org"))
    ("f" (find-file "~/source/emacs/chiaroscuro-theme.el"))
    ("g" (find-file "~/source/emacs/linux.el"))

    ("h" (lambda () (interactive)
           (progn
             (shell-command "cd ~/.emacs.d ; cp -r ~/source/emacs/* .")
             (my:open-and-eval-init-file)
             (toggle-frame-fullscreen))))
    ("j" (toggle-frame-fullscreen))

    ("k" (my:reset-themes-index))
    ("l" (my:theme-up))
    (";" (my:theme-down))

    ("1" (my:set-theme INDEX-CONSOLE))
    ("2" (my:set-theme INDEX-ECLIPSE))
    ("3" (my:set-theme INDEX-NEON))
    ("4" (my:set-theme INDEX-YELLOW))
    ("5" (my:set-theme INDEX-RED))
    ("6" (my:set-theme INDEX-HIGH-CONTRAST))

    ("'" (ibuffer0:00:00 ))

    ("q" nil "Quit" :color blue))
#+END_SRC
** hydra file
#+BEGIN_SRC emacs-lisp
  (defhydra hydra-file (:hint nil :color red)

    "
  File

  ^File^              ^Lsp^             ^Git^           ^Modify^             ^Project^
  ^^^^^-------------------------------------------------------------------------------------------------
  _l_: line numbers   _i_: imenu        _C_: focus      _c_: cua             _{_: highlight on
  _w_: whitespace     _t_: treemacs     _l_: log        _o_: overwrite       _}_: highlights off
  ^ ^                 ^ ^               ^ ^             ^ ^                  ^ ^
  "

    ("l" (my:toggle-line-numbers))
    ("w" (my:toggle-whitespace))
    ("i" (helm-imenu))
    ("t" (treemacs))
    ("C" (my:toggle-focus-mode))
    ("c" (my:toggle-cua-mode))
    ("o" (overwrite-mode))
    ("{" (hlt-highlight))
    ("}" (hlt-unhighlight-region))

    ("q" nil "Quit" :color blue))
#+END_SRC
** hydra master
#+BEGIN_SRC emacs-lisp
  (defhydra hydra-master (:color blue)
    ""
    ("a" hydra-emacs/body "Emacs")
    ("f" hydra-file/body "File")
    ("c" hydra-code/body "Code")
    ("w" hydra-window/body "Window")
    ("k" hydra-custom/body "Custom")
    ("q" nil "Quit" :color red))

  (global-set-key (kbd "C-`") 'hydra-master/body)
#+END_SRC
** hydra programs
#+BEGIN_SRC emacs-lisp
  (defhydra hydra-programs (:hint nil :color red)

    "
  Programs

  ^Web Surfing^    ^Reading^
  ^^^^^^^^-----------------------------
  _a_: eww         _d_: elfeed
  _s_: luwak       _f_: gnus
  "
    ("a" eww)
    ("s" luwak-search)

    ("d" elfeed)
    ("f" gnus)

    ("q" nil "Quit" :color blue))

  (defun my:open-and-eval-init-file ()
    "Open and eval init file."
    (interactive)
    (my:kill-init-buffer)
    (find-file "~/.emacs.d/init.el")
    (eval-buffer)
    (toggle-frame-fullscreen)
    (kill-buffer))

  (defun my:kill-init-buffer ()
    "Kill init buffer."
    (interactive)
    (let ((buffer-name "init.el"))
      (when (get-buffer buffer-name)
	(kill-buffer buffer-name))))

  (defun my:toggle-line-numbers ()
    "Toggle line numbers."
    (if global-display-line-numbers-mode
	(progn
	  (global-display-line-numbers-mode -1))
      (progn
	(global-display-line-numbers-mode t))))

  (defun my:toggle-whitespace ()
    "Toggle whitespace."
    (if whitespace-mode
	(progn
	  (whitespace-mode -1))
      (progn
	(whitespace-mode t))))

  (defun my:toggle-focus-mode ()
    "Toggle focus-mode."
    (if focus-mode
	(progn
	  (focus-mode -1))
      (progn
	(focus-mode t))))

  (defun my:toggle-golden-ratio-mode ()
    "Toggle focus-mode."
    (if golden-ratio-mode
	(progn
	  (golden-ratio-mode -1))
      (progn
	(golden-ratio-mode t))))

  (defun my:toggle-cua-mode ()
    "Toggle 'cua-mode'."
    (if cua-mode
	(progn
	  (cua-mode -1))
      (progn
	(cua-mode t))))

  (defun my:company-on ()
    "Company on."
    (progn
      (message "Company on")
      (global-company-mode t)
  ))
  
  (defun my:company-off ()
    "Company off."
    (progn
      (message "Company off")
      (global-company-mode -1)
  ))
  
  (defun my:eglot-on ()
    "Eglot on."
    (progn (message "Eglot on")))
      ;(add-hook 'java-mode-hook 'eglot-java-mode)))

  (defun my:eglot-off ()
    "Eglot off."
    (progn (message "Eglot off")))
      ;(remove-hook 'java-mode-hook 'eglot-java-mode)))

  (defun my:lsp-on ()
    "Lsp on."
    (progn (message "Lsp on")))
      ;(add-hook 'java-mode-hook 'lsp)))

  (defun my:lsp-off ()
    "Lsp off."
    (progn (message "Lsp off")))
      ;(remove-hook 'java-mode-hook 'lsp)))
#+END_SRC
** hydra window
#+BEGIN_SRC emacs-lisp
  (defhydra hydra-window (:hint nil :color red)

    "
  Window

  ^Delete^             ^Split^         ^Enlarge^           ^Shrink^            ^Jump^             ^Golden Ratio^
  ^^^^^^^^----------------------------------------------------------------------------------------------------------
  _1_: other windows   _3_: right      _5_: window         _7_: window         _9_: other window  _-_: toggle
  _2_: window          _4_: below      _6_: horizontally   _8_: horizontally   _0_: ace
  "
    ("1" delete-other-windows)
    ("2" delete-window)

    ("3" split-window-right)
    ("4" split-window-below)

    ("5" enlarge-window)
    ("6" enlarge-window-horizontally)

    ("7" shrink-window)
    ("8" shrink-window-horizontally)

    ("9" other-window)
    ("0" ace-window)

    ("-" (my:toggle-golden-ratio-mode))

    ("q" nil "Quit" :color blue))
#+END_SRC
** ibuffer-vc
#+BEGIN_SRC emacs-lisp
  (add-hook 'ibuffer-hook
            (lambda ()
              (ibuffer-vc-set-filter-groups-by-vc-root)
              (unless (eq ibuffer-sorting-mode 'alphabetic)
                (ibuffer-do-sort-by-alphabetic))))

  (setq ibuffer-formats
        '((mark modified read-only " "
                (name 75 75 :left :elide)
                " "
                (size 9 -1 :right)
                " "
                (mode 16 16 :left :elide)
                " " filename-and-process)
          (mark " "
                (name 16 -1)
                " " filename)))
#+END_SRC
** imenu
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-9") 'helm-semantic-or-imenu)
#+END_SRC
** key bindings, kbd
#+BEGIN_SRC emacs-lisp
  ;(global-set-key (kbd "<f10>") 'tmm-menubar)
  ;(global-set-key (kbd "C-<next>") 'next-buffer)
  ;(global-set-key (kbd "C-<prior>") 'previous-buffer)
  ;(global-set-key (kbd "C-x g") 'magit-status)
  ;(global-set-key (kbd "C-x p") 'projectile-switch-project)
  ;(global-set-key (kbd "C-x o") 'projectile-find-file)
  ;(global-set-key (kbd "<C-iso-lefttab>") 'my:previous-link-center)
  ;(global-set-key (kbd "<C-tab>") 'completion-at-point)
  ;(global-set-key (kbd "C-c m") 'my:agenda-view)
  ;(global-set-key (kbd "C-9") 'imenu)
  ;(global-set-key (kbd "C-9") 'helm-semantic-or-imenu)
  ;(global-set-key (kbd "C-(") 'treemacs)
  ;(global-set-key (kbd "C-0") 'delete-window)
  ;(global-set-key (kbd "C-\\") 'my:vc-git-grep)
  ;(global-set-key (kbd "C-M-`") 'helm-projectile-grep)
  ;(global-set-key (kbd "C-8") 'whitespace-mode)
  ;(global-set-key (kbd "C-x 5 5") 'magit-blame)
  ;(global-set-key (kbd "C-x 5 6") 'magit-log-buffer-file)
  ;(global-set-key (kbd "C-<escape>") 'evil-mode)
  ;(global-set-key (kbd "C-'") 'treemacs-increase-width)
  ;(global-set-key (kbd "C-;") 'treemacs-decrease-width)
  ;(global-set-key (kbd "M-m") 'xref-pop-marker-stack)
  ;(global-set-key (kbd "M-,") 'xref-find-definitions)
  ;(global-set-key (kbd "M-n") 'evil-first-non-blank)
  ;(global-set-key (kbd "C-x w") 'overwrite-mode)
  ;(global-set-key (kbd "C-c t") 'my:trim-whitespace)
  ;(global-set-key (kbd "C-c j") 'company-yasnippet)
  ;(global-set-key (kbd "C-c SPC") 'company-complete)
  ;(global-set-key (kbd "C-x e") 'eval-buffer)
  ;(global-set-key (kbd "C-x a t") 'ert-run-tests-interactively)
  ;(global-set-key (kbd "M-s s") 'swiper)
  ;(global-set-key (kbd "M-s a") 'swiper-all)
  ;(global-set-key (kbd "M-s d") 'swiper-helm)
  ;(global-set-key (kbd "C-s") 'swiper)
  ;(global-set-key (kbd "C-c d") 'lsp-ui-peek-find-definitions)
  ;;;(global-set-key (kbd "C-c i") 'lsp-ui-peek-find-implementation)
  ;(global-set-key (kbd "C-c e") 'lsp-execute-code-action)
  ;(global-set-key (kbd "C-x b") 'ido-switch-buffer)
  ;(global-set-key (kbd "C-x C-b") 'ido-switch-buffer)
  ;(global-set-key (kbd "C-<") #'(lambda() (interactive) (scroll-right 10)))
  ;(global-set-key (kbd "C->") #'(lambda() (interactive) (scroll-left 10)))
  ;(global-set-key (kbd "C-#") 'global-hl-line-mode)
  ;(global-set-key (kbd "C-x r 1") 'copy-to-register)
  ;(global-set-key (kbd "C-x r 2") 'helm-register)
  ;;;(global-set-key (kbd "C-@") 'helm-register)
  ;(global-set-key (kbd "C-+") 'helm-filtered-bookmarks)
  ;(global-set-key (kbd "C-t") 'counsel-projectile-switch-to-buffer)
  ;(global-set-key (kbd "C-p") 'counsel-projectile-switch-project)
  ;(global-set-key (kbd "C-=") 'counsel-projectile)
  ;(global-set-key (kbd "C-c u u") 'dap-java-run-test-class)
  ;(global-set-key (kbd "C-c u t") 'dap-java-run-test-method)
  ;(global-set-key (kbd "C-c i") 'ibuffer)
  ;(global-set-key (kbd "C-c 1") 'hlt-highlight)
  ;(global-set-key (kbd "C-c 2") 'hlt-unhighlight-region)
  ;(global-set-key (kbd "C-c 3") 'hlt-highlight-symbol)
  ;(global-set-key (kbd "C-.") 'avy-goto-char-2)
  ;(global-set-key (kbd "M-~") 'avy-goto-char-2)
  ;(global-set-key (kbd "C-c f") 'focus-mode)
  ;(global-set-key (kbd "M-o") 'other-window)
  ;(global-set-key (kbd "C-1") 'delete-other-windows)
  ;(global-set-key (kbd "C-1") 'delete-other-windows)
  ;(global-set-key (kbd "C-M-`") 'lsp-ui-imenu)
#+END_SRC
** look
#+BEGIN_SRC emacs-lisp
  (menu-bar-mode 0)
  (tool-bar-mode 0)
  (scroll-bar-mode 0)

  (fringe-mode '(20 . 20))
  (defvar my:fringe 1)

  (setq user-cache-directory (concat EMACS-HOME "cache"))

  (setq blink-cursor-blinks 0)

  (setq display-line-numbers-type 'absolute)
  (global-set-key (kbd "C-7") 'global-display-line-numbers-mode)

  ;; 4 spaces indentation
  ;(setq c-default-style "linux" c-basic-offset 4)
  ;(require 'clang-format)

  ;; disable tabs
  ;(setq-default indent-tabs-mode nil)
  ;(setq-default tab-width 4)
  ;(defun my:indent-tabs-mode ()
  ;  (setq indent-tabs-mode nil))
  ;(add-hook 'c++-mode-hook #'my:indent-tabs-mode)
  ;(add-hook 'java-mode-hook #'my:indent-tabs-mode)

  (display-time)
  ;(setq display-time-default-load-average nil)

  (fset 'yes-or-no-p 'y-or-n-p)

  (setq confirm-kill-emacs 'y-or-n-p)

  ;; increase height of which-key
  (setq max-mini-window-height 0.9)
  (setq which-key-side-window-max-height 0.9)

  (defvar default-font-size 0 "Global Emacs default font size")
  (defvar font-size 0 "Global Emacs font size")
  (setq font-size 200)
  (setq default-font-size 200)
  (cond
   ((string-equal system-type "windows-nt")
    (progn (setq default-font-size 150) (setq font-size 150)))
   ((string-equal system-type "gnu/linux")
    (cond
     ((string-equal LINUX-VERSION "ubuntu")
      (progn (setq default-font-size 180) (setq font-size 180)))
     ((string-equal LINUX-VERSION "raspberrypi")
      (progn (setq default-font-size 200) (setq font-size 200))))))
  (set-face-attribute 'default nil :height font-size)

  (setq inhibit-startup-screen t)
#+END_SRC
** projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile)

  (unless (package-installed-p 'projectile)
  (package-install 'projectile))

  (require 'projectile)
  (setq projectile-indexing-method 'alien)
  (projectile-global-mode)
  (projectile-mode t)
  (global-set-key (kbd "C-x p") 'helm-projectile-switch-project)
  (global-set-key (kbd "C-x o") 'helm-projectile-find-file)
  (global-set-key (kbd "C-~") 'helm-projectile-switch-to-buffer)

  (global-set-key (kbd "C-t") 'counsel-projectile-switch-to-buffer)
  (global-set-key (kbd "C-p") 'counsel-projectile-switch-project)
  (global-set-key (kbd "C-=") 'counsel-projectile)
  
  (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
#+END_SRC
** themes
#+BEGIN_SRC emacs-lisp
  (setq INDEX-CONSOLE       1)
  (setq INDEX-ECLIPSE       2)
  (setq INDEX-NEON          3)
  (setq INDEX-YELLOW        4)
  (setq INDEX-RED           5)
  (setq INDEX-HIGH-CONTRAST 6)

  (defvar chiaroscuro-index 0 "Index representing the current theme")
  (setq chiaroscuro-index 0)

  (setq themes-list '(chiaroscuro
                      chiaroscuro
                      chiaroscuro
                      chiaroscuro
                      chiaroscuro
                      chiaroscuro))

  (setq themes-list-names '("console"
                            "eclipse"
                            "neon"
                            "yellow"
                            "red"
                            "high contrast"))

  (defvar theme-index 0 "Index representing the current theme")
  (setq theme-index 0)
  (setq number-of-themes (length themes-list))

  (defun my:disable-themes ()
    (interactive)
    (setq loop-index 0)
    (while (< loop-index number-of-themes)
      (disable-theme (nth loop-index themes-list))
      (setq loop-index (+ loop-index 1))))

  (defun my:reset-themes-index ()
    (interactive)
    (setq theme-index 0)
    (setq INDEX-CHIAROSCURO 0)
    (my:disable-themes))

  (defun my:loop ()
    (interactive)
    (setq loop-index 1)
    (setq themes-list-index 0)
    (while (<= loop-index number-of-themes)
      (if (eq theme-index loop-index)
          (progn
            (load-theme (nth themes-list-index themes-list) t)
            (message "%s" (nth themes-list-index themes-list-names))))
      (setq loop-index (+ loop-index 1))
      (setq themes-list-index (+ themes-list-index 1))))

  (defun my:toggle-themes ()
    (interactive)
    (my:disable-themes)

    (if (eq theme-index -1)
        (progn (setq theme-index number-of-themes)))

    (if (eq theme-index 0)
        (progn (message "emacs")
               (setq theme-index 0)
               (setq INDEX-CHIAROSCURO 0)))

    (my:loop)

    (if (> theme-index number-of-themes)
        (progn (message "emacs")
               (setq theme-index 0)
               (setq INDEX-CHIAROSCURO 0))))

  (defun my:theme-down ()
    (interactive)
    (setq theme-index (- theme-index 1))
    (setq INDEX-CHIAROSCURO (- INDEX-CHIAROSCURO 1))
    (my:toggle-themes))
  (global-set-key (kbd "C-x 6") 'my:theme-down)

  (defun my:theme-up ()
    (interactive)
    (setq theme-index (+ theme-index 1))
    (setq INDEX-CHIAROSCURO (+ INDEX-CHIAROSCURO 1))
    (my:toggle-themes))

  (defun my:set-theme (index)
    (interactive)
    (setq theme-index index)
    (setq INDEX-CHIAROSCURO index)
    (my:toggle-themes))
#+END_SRC
** which-key
#+BEGIN_SRC emacs-lisp
  (which-key-mode t)
#+END_SRC

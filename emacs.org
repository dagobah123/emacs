* emacs
** global variables
The index of the current chiaroscuro theme.
#+BEGIN_SRC emacs-lisp
  (setq CHIAROSCURO-INDEX 0)
#+END_SRC
** package archives
#+BEGIN_SRC emacs-lisp
  (require 'package)
  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("elpa" . "https://elpa.gnu.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")))
#+END_SRC
** package initialize
#+BEGIN_SRC emacs-lisp
  (package-initialize)

  (unless package-archive-contents (package-refresh-contents))

  (setq package-list '(use-package
                       all-the-icons
                       company
                       company-box
                       counsel
                       counsel-projectile
                       counsel-web
                       csharp-mode
                       dired-narrow
                       elfeed
                       evil
                       goto-last-change
                       helm-projectile
                       helm-swoop
                       ivy
                       magit
                       magit-find-file
                       move-text
                       nov
                       openwith
                       ox-jira
                       powershell
                       projectile
                       swiper-helm
                       telephone-line
                       treemacs-projectile
                       )
        )

  (dolist (package package-list)
    (unless (package-installed-p package) (package-install package)))
#+END_SRC
** environment setup
Load environment variables properly by installing *exec-path-from-shell*.
#+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell :ensure t)
  (exec-path-from-shell-initialize)
#+END_SRC
** os specific settings
Load emacs-lisp file for linux or windows.
Load emacs-lisp file for custom changes.
#+BEGIN_SRC emacs-lisp
  (cond
   ((eq system-type 'gnu/linux) (load (concat EMACS-HOME "linux")))
   ((eq system-type 'windows-nt) (load (concat EMACS-HOME "windows")))
   (t (load-library "default")))
  (load (concat EMACS-HOME "custom"))
#+END_SRC
** look
#+BEGIN_SRC emacs-lisp
  ; disable menu bar
  (menu-bar-mode 0)

  ; disable tool bar
  (tool-bar-mode 0)

  ; disable scroll bar
  (scroll-bar-mode 0)

  ; set width of fringe
  (fringe-mode '(20 . 20))

  ; setup cache folder to prevent temporary files to clutter projects
  (setq user-cache-directory (concat EMACS-HOME "cache"))
  (setq backup-directory-alist '(("." . '(expand-file-name "backups" user-cache-directory))))
  (setq url-history-file (expand-file-name "url/history" user-cache-directory))
  (setq auto-save-list-file-prefix (expand-file-name "auto-save-list/.saves-" user-cache-directory))
  (setq projectile-known-projects-file (expand-file-name "projectile-bookmarks.eld" user-cache-directory))

  ; cursor blinks forever
  (setq blink-cursor-blinks 0)

  ; set line number mode and kbd to show them
  (setq display-line-numbers-type 'relative)
  (global-set-key (kbd "C-7") 'global-display-line-numbers-mode)

  ; use hl line
  (global-hl-line-mode -1)

  ; 4 spaces indentation
  (setq c-default-style "linux" c-basic-offset 4)

  ; disable tabs
  (setq-default indent-tabs-mode nil)
  (setq-default tab-width 4)

  (setq whitespace-line-column 1000)

  ; clock
  (display-time)

  ; ask for y/n instead of yes/no
  (fset 'yes-or-no-p 'y-or-n-p)

  ; confirm before closing emacs
  (setq confirm-kill-emacs 'y-or-n-p)

  ; font size
  (cond
   ((string-equal system-type "windows-nt")
    (progn (set-face-attribute 'default nil :height 150)))
   ((string-equal system-type "gnu/linux")
    (cond
     ((string-equal LINUX-VERSION "ubuntu")
      (progn (set-face-attribute 'default nil :font "DejaVu Sans Mono-16")))
     ((string-equal LINUX-VERSION "raspberrypi")
      (progn (set-face-attribute 'default nil :font "DejaVu Sans Mono-24"))))))

  ; do not show start-up screen
  (setq inhibit-startup-screen t)
#+END_SRC
** behavior
#+BEGIN_SRC emacs-lisp
  ; use regular copy paste commands
  (cua-mode t)

  ; scrolling up and down one line
  (global-set-key (kbd "C-<down>") 'scroll-up-line)
  (global-set-key (kbd "C-<up>") 'scroll-down-line)

  ; move text up/down
  (global-set-key (kbd "M-<down>") 'move-text-down)
  (global-set-key (kbd "M-<up>") 'move-text-up)

  ; change window size
  (global-set-key (kbd "C-1") 'enlarge-window-horizontally)
  (global-set-key (kbd "C-2") 'shrink-window-horizontally)
  (global-set-key (kbd "C-3") 'enlarge-window)
  (global-set-key (kbd "C-4") 'shrink-window)

  ; do not create backup files
  (setq make-backup-files nil)

  ; switch split buffers
  (global-set-key (kbd "M-o") 'other-window)

  ; disable bell
  (setq ring-bell-function 'ignore)

  ; set language environment to UTF-8
  (set-language-environment "UTF-8")
  (set-default-coding-systems 'utf-8)

  ; go to last change
  (global-set-key (kbd "C-x q") 'goto-last-change)

  ; highlight opening and closing parenthesis
  (show-paren-mode t)
  (setq show-paren-style 'expression)

  ; truncate lines
  (setq-default truncate-lines t)

  ; in camel case jump from subword to subword
  (add-hook 'c-mode-common-hook
            (lambda () (subword-mode t)))
  (add-hook 'java-mode-common-hook
            (lambda () (subword-mode t)))

  (setq sentence-end-double-space nil)
#+END_SRC
** org mode
#+BEGIN_SRC emacs-lisp
  (setq org-directory "~/source/org-mode/")
  (setq org-default-notes-file (concat org-directory "/org-capture.org"))
  (global-set-key (kbd "C-c a") 'org-agenda)
  (global-set-key (kbd "C-c c") 'org-capture)
  (global-set-key (kbd "C-c s") 'org-schedule)
  (global-set-key (kbd "C-c l") 'org-store-link)
  (global-set-key (kbd "C-c o") 'org-switchb)

  (load (concat EMACS-HOME "agenda"))

  (setq org-priority-faces '((?A . (:foreground "white" :background "red3"        :weight 'bold))
                             (?B . (:foreground "white" :background "DarkOrange1" :weight 'bold))
                             (?C . (:foreground "white" :background "green4"      :weight 'bold))))

  (setq org-startup-folded 'showeverything)

  (setq org-support-shift-select 'always)
  (setq org-todo-keywords '((sequence "TODO" "IN-PROGRESS" "|" "DONE")))
  (setq org-tags-column 0)
  (setq org-adapt-indentation nil)

  (setq org-latex-pdf-process '("latexmk -f -pdf %f"))

  (setq org-image-actual-width (list 500))

  (setq org-publish-project-alist
      '(("org-mode-notes-emacs"
         :base-directory "~/source/org-mode/notes/emacs/"
         :base-extension "org"
         :publishing-directory "~/publish/emacs/"
         :recursive t
         :publishing-function org-html-publish-to-html
         :headline-levels 4
         :auto-preamble t)

        ("org-mode-notes-emacs-static"
         :base-directory "~/source/org-mode/notes/emacs/"
         :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|swf"
         :publishing-directory "~/publish/emacs/"
         :recursive t
         :publishing-function org-publish-attachment)

        ("org-mode-notes-development"
         :base-directory "~/source/org-mode/notes/development/"
         :base-extension "org"
         :publishing-directory "~/publish/development/"
         :recursive t
         :publishing-function org-html-publish-to-html
         :headline-levels 4
         :auto-preamble t)

        ("org-mode-notes-development-static"
         :base-directory "~/source/org-mode/notes/development/"
         :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|swf"
         :publishing-directory "~/publish/development/"
         :recursive t
         :publishing-function org-publish-attachment)

        ("org" :components ("org-mode-notes-emacs"
                            "org-mode-notes-emacs-static"
                            "org-mode-notes-development"
                            "org-mode-notes-development-static"))))
#+END_SRC
** evil
#+BEGIN_SRC emacs-lisp
  (use-package evil)
  (require 'evil)
  (evil-mode 1)

  (evil-set-initial-state 'Info-mode 'emacs)
  (setq-default evil-default-state 'emacs)

  (use-package telephone-line)
  (require 'telephone-line)

  (setq telephone-line-primary-left-separator    'telephone-line-flat
        telephone-line-secondary-left-separator  'telephone-line-flat
        telephone-line-primary-right-separator   'telephone-line-flat
        telephone-line-secondary-right-separator 'telephone-line-flat)

  (setq telephone-line-evil-use-short-tag t)

  (setq telephone-line-lhs
      '((evil  . (telephone-line-evil-tag-segment))
        (nil   . (telephone-line-buffer-segment))
        (nil   . (telephone-line-vc-segment
                  telephone-line-erc-modified-channels-segment))
        (nil   . (telephone-line-projectile-segment))))

  (setq telephone-line-rhs
      '((nil   . (telephone-line-misc-info-segment))
        (nil   . (telephone-line-major-mode-segment))
        (nil   . (telephone-line-airline-position-segment))))

  ; all configurations must be set before this line
  ; https://github.com/dbordak/telephone-line/blob/master/examples.org
  (telephone-line-mode 1)
#+END_SRC
** mode line
#+BEGIN_SRC emacs-lisp
  (require 'hide-mode-line)
#+END_SRC
** projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile)

  (unless (package-installed-p 'projectile)
  (package-install 'projectile))

  (require 'projectile)
  (setq projectile-indexing-method 'alien)
  (projectile-global-mode)
  (projectile-mode t)
  (global-set-key (kbd "C-x p") 'helm-projectile-switch-project)
  (global-set-key (kbd "C-x o") 'helm-projectile-find-file)
  (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
#+END_SRC
** helm
#+BEGIN_SRC emacs-lisp
  (use-package helm
    :ensure t
    :init
    (helm-mode t)
    (progn (setq helm-buffers-fuzzy-matching t))
    :bind
    (("M-x" . helm-M-x))
    (("C-c k r" . helm-show-kill-ring))
    (("C-c h" . helm-grep-do-git-grep))
    (("C-r"   . helm-swoop))
    (("C-c b" . helm-buffers-list))
    (("C-c r" . helm-bookmarks))
    (("C-c i" . helm-mini))
    (("C-c q" . helm-info)))
#+END_SRC
** helm-projectile
#+BEGIN_SRC emacs-lisp
  (require 'helm-projectile)
  (helm-projectile-on)
#+END_SRC
** dired
#+BEGIN_SRC emacs-lisp
  ; dired move up folder with "b"
  (add-hook 'dired-mode-hook
            (lambda ()
              (define-key dired-mode-map (kbd "b")
                          (lambda () (interactive) (find-alternate-file "..")))))

  (use-package dired-narrow
    :ensure t
    :config
    (bind-key "C-x f" #'dired-narrow))
  (require 'dired-narrow)
#+END_SRC
** lsp
*** Company
Complete anything aka Company provides auto-completion.
Company-capf is enabled by default when you start LSP on a project.
You can also invoke ~M-x company-capf~ to enable capf (completion at point function).
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t)
  (use-package company-box
    :ensure t)
  (company-mode t)
  (require 'company-box)
  (add-hook 'company-mode-hook 'company-box-mode)
#+END_SRC
*** Yasnippet
Yasnippet is a template system for Emacs.
It allows you to type abbreviation and complete the associated text.
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :config (yas-global-mode))
  (use-package yasnippet-snippets
    :ensure t)
  (setq yas-snippet-dirs '("~/.emacs.d/snippets"))
#+END_SRC

E.g. In java mode, if you type ~pr~ and hit ~<TAB>~ it should complete to ~System.out.println("text");~

To create a new snippet you can use ~yas-new-snippet~ command.
*** FlyCheck
FlyCheck checks for errors in code at run-time.
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :init (global-flycheck-mode))
#+END_SRC
*** Dap Mode
Emacs Debug Adapter Protocol aka DAP Mode allows us to debug your program.
Below we will integrate ~dap-mode~ with ~dap-hydra~.
~Dap-hydra~ shows keys you can use to enable various options and jump through code at runtime.
After we install dap-mode we will also install ~dap-java~.
#+BEGIN_SRC emacs-lisp
  (use-package dap-mode
    :ensure t
    :after (lsp-mode)
    :functions dap-hydra/nil
    :config
    (require 'dap-java)
    :bind (:map lsp-mode-map
                ("<f5>" . dap-debug)
                ("M-<f5>" . dap-hydra))
    :hook ((dap-mode . dap-ui-mode)
           (dap-session-created . (lambda (&_rest) (dap-hydra)))
           (dap-terminated . (lambda (&_rest) (dap-hydra/nil)))))

  (use-package dap-java :ensure nil)
#+END_SRC
*** Treemacs
Treemacs provides UI elements used for LSP UI.
Let's install lsp-treemacs and its dependency treemacs.
We will also assign ~M-9~ to show error list.
#+BEGIN_SRC emacs-lisp
  (use-package lsp-treemacs
    :after (lsp-mode treemacs)
    :ensure t
    :commands lsp-treemacs-errors-list
    :bind (:map lsp-mode-map
                ("M-9" . lsp-treemacs-errors-list)))

  (use-package treemacs
    :ensure t
    :commands (treemacs)
    :after (lsp-mode))

  (setq treemacs-no-png-images t)
  (treemacs-project-follow-mode t)
#+END_SRC
*** LSP UI
LSP UI is used in various packages that require UI elements in LSP.
E.g. ~lsp-ui-flycheck-list~ opens a window where you can see various coding errors while you code.
You can use ~C-c l T~ to toggle several UI elements.
We have also remapped some of the xref-find functions, so that we can easily jump around between symbols using ~M-.~, ~M-,~ and ~M-?~ keys.
#+BEGIN_SRC emacs-lisp
  (use-package lsp-ui
    :ensure t
    :after (lsp-mode)
    :bind (:map lsp-ui-mode-map
                ([remap xref-find-definitions] . lsp-ui-peek-find-definitions)
                ([remap xref-find-references] . lsp-ui-peek-find-references))
    :init (setq lsp-ui-doc-delay 1.5
                lsp-ui-doc-position 'bottom
                lsp-ui-doc-max-width 100))
#+END_SRC
Go through this [[https://github.com/emacs-lsp/lsp-ui/blob/master/lsp-ui-doc.el][link]] to see what other parameters are provided.
*** Helm LSP
Helm-lsp provides various functionality to work with the code.
E.g. code actions like adding *getter, setter, toString*, refactoring etc.
You can use ~helm-lsp-workspace-symbol~ to find various symbols (classes) within your workspace.
LSP's built in symbol explorer uses ~xref-find-apropos~ to provide symbol navigation.
Below we will replace that with helm version.
After that you can use ~C-c l g a~ to find workspace symbols in a more intuitive way.
#+BEGIN_SRC emacs-lisp
  (use-package helm-lsp
    :ensure t
    :after (lsp-mode)
    :commands (helm-lsp-workspace-symbol)
    :init (define-key lsp-mode-map [remap xref-find-apropos] #'helm-lsp-workspace-symbol))
#+END_SRC
*** Install LSP Package
Let's install the main package for lsp.
Here we will integrate lsp with which-key.
This way, when we type the prefix key ~C-c l~ we get additional help for compliting the command.
#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :ensure t
    :hook ((lsp-mode . lsp-enable-which-key-integration)
           (java-mode . #'lsp-deferred))
    :init (setq lsp-keymap-prefix "C-c l"              ; this is for which-key integration documentation, need to use lsp-mode-map
                lsp-enable-file-watchers nil
                read-process-output-max (* 1024 1024)  ; 1 mb
                lsp-completion-provider :capf
                lsp-idle-delay 0.500)
    :config (setq lsp-intelephense-multi-root nil) ; don't scan unnecessary projects
    (with-eval-after-load 'lsp-intelephense
      (setf (lsp--client-multi-root (gethash 'iph lsp-clients)) nil))
    (define-key lsp-mode-map (kbd "C-c l") lsp-command-map))
#+END_SRC
You can start LSP server in a java project by using ~C-c l s s~.
Once you type ~C-c l~ ~which-key~ package should guide you through rest of the options.
In above setting I have added some memory management settings as suggested in [[https://emacs-lsp.github.io/lsp-mode/page/performance/][this guide]].
Change them to higher numbers, if you find *lsp-mode* sluggish in your computer.
*** LSP Java
This is the package that handles server installation and session management.
#+BEGIN_SRC  emacs-lisp
  (use-package lsp-java
    :ensure t
    :config (add-hook 'java-mode-hook 'lsp))

  (require 'lsp-java)
  (add-hook 'java-mode-hook #'lsp)

  (condition-case nil
      (require 'use-package)
    (file-error
     (require 'package)
     (add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
     (package-initialize)
     (package-refresh-contents)
     (package-install 'use-package)
     (setq use-package-always-ensure t)
     (require 'use-package)))

  (use-package projectile)
  (use-package flycheck)
  (use-package yasnippet :config (yas-global-mode))

  (use-package lsp-mode
    :hook ((lsp-mode . lsp-enable-which-key-integration))
    :config (setq lsp-completion-enable-additional-text-edit nil))
  (use-package hydra)
  (use-package company)
  (use-package company-box)
  (use-package lsp-ui)
  (use-package which-key :config (which-key-mode))
  (use-package lsp-java :config (add-hook 'java-mode-hook 'lsp))
  (use-package dap-mode :after lsp-mode :config (dap-auto-configure-mode))
  (use-package dap-java :ensure nil)
  (use-package helm-lsp)
  (use-package helm
    :config (helm-mode))
  (use-package lsp-treemacs)

  ; show nice unit test results
  (add-hook 'compilation-filter-hook
            (lambda() (ansi-color-apply-on-region (point-min) (point-max))))
#+END_SRC

#+BEGIN_SRC  emacs-lisp
  (setq lsp-print-io t)

  ; https://emacs-lsp.github.io/lsp-mode/tutorials/how-to-turn-off/
  (setq lsp-modeline-code-actions-enable nil)
  (setq lsp-headerline-breadcrumb-enable nil)
#+END_SRC
** lsp c++
#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :hook ((c++-mode . lsp)))
  (use-package lsp-ui
    :commands lsp-ui-mode)
#+END_SRC
** lsp python
#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :hook ((python-mode . lsp)))
  (use-package lsp-ui
    :commands lsp-ui-mode)
#+END_SRC
** bookmarks
#+BEGIN_SRC emacs-lisp
  (use-package bm
    :ensure t
    :demand t
    :init (setq bm-restore-repository-on-load t) ; restore on load (even before you require bm)
    :config
    (setq bm-cycle-all-buffers nil) ; Allow cross-buffer 'next'
    (setq bm-repository-file "~/.emacs.d/bm-repository") ; where to store persistant files
    (setq-default bm-buffer-persistence t) ; save bookmarks
    (add-hook 'after-init-hook 'bm-repository-load) ; Loading the repository from file when on start up.
    (add-hook 'kill-buffer-hook #'bm-buffer-save) ; Saving bookmarks
    (add-hook 'kill-emacs-hook #'(lambda nil
                                   (bm-buffer-save-all)
                                   (bm-repository-save))) ; Saving the repository to file when on exit. kill-buffer-hook is not called when Emacs is killed, so we must save all bookmarks first.
    (add-hook 'after-save-hook #'bm-buffer-save) ; The 'after-save-hook' is not necessary to use to achieve persistence, but it makes the bookmark data in repository more in sync with the file state.
    (add-hook 'find-file-hooks   #'bm-buffer-restore) ; Restoring bookmarks
    (add-hook 'after-revert-hook #'bm-buffer-restore) ; Restoring bookmarks
    (add-hook 'vc-before-checkin-hook #'bm-buffer-save)
    ; The 'after-revert-hook' is not necessary to use to achieve persistence,
    ; but it makes the bookmark data in repository more in sync with the file
    ; state. This hook might cause trouble when using packages
    ; that automatically reverts the buffer (like vc after a check-in).
    ; This can easily be avoided if the package provides a hook that is
    ; called before the buffer is reverted (like `vc-before-checkin-hook').
    ; Then new bookmarks can be saved before the buffer is reverted.
    ; Make sure bookmarks is saved before check-in (and revert-buffer)
    :bind (("C-%" . bm-next)
           ;("C-^" . bm-previous)
           ("C-&" . bm-show-all)))
  (require 'helm-bm)
  (global-set-key (kbd "C-*") 'helm-bm)
  (global-set-key (kbd "C-!") 'bookmark-bmenu-list)
  (global-set-key (kbd "C-$") 'my:set-bookmark)
  (global-set-key (kbd "C-(") 'my:remove-bookmarks)

  (defun my:set-bookmark()
    (interactive)
    (bm-toggle)
    ;(bookmark-delete 'get-buffer)
    (bookmark-set ""))

  (defun my:remove-bookmarks()
    (interactive)
    ;(bookmark-delete-all)
    (bm-remove-all-all-buffers))
#+END_SRC
** magit
#+BEGIN_SRC emacs-lisp
  (use-package magit)
  (use-package magit-find-file)
  (with-eval-after-load 'magit-mode
    (add-hook 'after-save-hook 'magit-after-save-refresh-status t))
#+END_SRC
** eww
#+BEGIN_SRC emacs-lisp
  (setq browse-url-browser-function 'eww-browse-url ; Use eww as the default browser
        shr-use-fonts  nil ; No special fonts
        shr-use-colors nil ; No colors
        eww-search-prefix "https://wiby.me/?q=") ; Use another engine for searching
 #+END_SRC
** company
#+BEGIN_SRC emacs-lisp
  (add-hook 'after-init-hook 'global-company-mode)
#+END_SRC
** nov
#+BEGIN_SRC emacs-lisp
  (defun my:nov-visual-line-mode()
    (interactive)
    (visual-line-mode))

  (add-hook 'nov-mode-hook 'my:nov-visual-line-mode)
#+END_SRC
** engine mode
#+BEGIN_SRC emacs-lisp
;(require 'engine-mode)
;(engine-mode t)

;(defengine duckduckgo
;  "https://duckduckgo.com/?q=%s"
;  :keybinding "d")

;(defengine google
;  "http://www.google.com/search?ie=utf-8&oe=utf-8&q=%s"
;  :keybinding "g")

;(defengine google-images
;  "http://www.google.com/images?hl=en&source=hp&biw=1440&bih=795&gbv=2&aq=f&aqi=&aql=&oq=&q=%s"
;  :keybinding "i")

;(defengine google-maps
;  "http://maps.google.com/maps?q=%s"
;  :keybinding "m")

;(defengine stack-overflow
;  "https://stackoverflow.com/search?q=%s"
;  :keybinding "o")

;(defengine wikipedia
;  "http://www.wikipedia.org/search-redirect.php?language=en&go=Go&search=%s"
;  :keybinding "w")

;(defengine youtube
;  "http://www.youtube.com/results?aq=f&oq=&search_query=%s"
;  :keybinding "y")
#+END_SRC
** openwith
#+BEGIN_SRC emacs-lisp
  (require 'openwith)
  (openwith-mode t)
  (setq openwith-associations
        (list (list (openwith-make-extension-regexp '("pdf")) "qpdfview" '(file))
              (list (openwith-make-extension-regexp '("avi" "mp3" "mp4" "wav")) "vlc" '(file))
              (list (openwith-make-extension-regexp '("cr2")) "rawtherapee" '(file))
              (list (openwith-make-extension-regexp '("sln")) "C:\\Program Files\\Microsoft Visual Studio\\2022\\Professional\\Common7\\IDE\\devenv.exe" '(file))))
#+END_SRC
** winner mode
#+BEGIN_SRC emacs-lisp
  (when (fboundp 'winner-mode)
    (winner-mode t))
#+END_SRC
** ido
#+BEGIN_SRC emacs-lisp
  (setq ido-enable-flex-matching t)
  (ido-mode t)
#+END_SRC
** windows
#+BEGIN_SRC emacs-lisp
  (use-package powershell)
  (require 'powershell)

  (use-package csharp-mode)
  (require 'csharp-mode)
#+END_SRC
** clock
#+BEGIN_SRC emacs-lisp
  (setq display-time-world-list '(("Europe/Vienna" "Graz")))
#+END_SRC
** elfeed
#+BEGIN_SRC emacs-lisp
  (require 'elfeed)
  (setq elfeed-feeds '(("https://www.comicsrss.com/rss/dilbert.rss" comics dilbert)
                       ("https://www.comicsrss.com/rss/garfield.rss" comics garfield)
                       ("https://www.comicsrss.com/rss/peanuts.rss" comics peanuts)))
#+END_SRC
** counsel-web
#+BEGIN_SRC emacs-lisp
  (require 'counsel-web)

  (defvar counsel-web-map
    (let ((map (make-sparse-keymap "counsel-web")))
      (define-key map (kbd "w") #'counsel-web-suggest)
      (define-key map (kbd "s") #'counsel-web-search)
      (define-key map (kbd ".") #'counsel-web-thing-at-point) map))
  (global-set-key (kbd "C-c w") counsel-web-map)
#+END_SRC
** counsel-projectile
#+BEGIN_SRC emacs-lisp
  (require 'counsel-projectile)
  (use-package counsel-projectile)
  (counsel-projectile-mode t)
#+END_SRC
** ivy
#+BEGIN_SRC emacs-lisp
  (setq ivy-height 15)
#+END_SRC
** custom functions
#+BEGIN_SRC emacs-lisp
  (defun my:duplicate-line()
    (interactive)
    (move-beginning-of-line 1)
    (kill-line)
    (yank)
    (open-line 1)
    (next-line 1)
    (yank))

  (defun eww-new()
    (interactive)
    (let ((url (read-from-minibuffer "Enter URL or keywords: ")))
      (switch-to-buffer (generate-new-buffer "eww"))
      (eww-mode)
      (eww url)))

  (defun my:copy-line-at-point()
    (interactive)
    (move-beginning-of-line 1)
    (kill-line)
    (yank))

  (defun my:trim-whitespace()
    (interactive)
    (move-beginning-of-line 1)
    (fixup-whitespace))

  (defvar java-function-regexp
    (concat
     "^[ \t]*"                                   ; leading white space
     "\\(public\\|private\\|protected\\|"        ; some of these 8 keywords
     "abstract\\|final\\|static\\|"
     "synchronized\\|native"
     "\\|override"                               ; C# support
     "\\|[ \t\n\r]\\)*"                          ; or whitespace
     "[a-zA-Z0-9_$]+"                            ; return type
     "[ \t\n\r]*[[]?[]]?"                        ; (could be array)
     "[ \t\n\r]+"                                ; whitespace
     "\\([a-zA-Z0-9_$]+\\)"                      ; the name we want!
     "[ \t\n\r]*"                                ; optional whitespace
     "("                                         ; open the param list
     "\\([ \t\n\r]*"                             ; optional whitespace
     "\\<[a-zA-Z0-9_$]+\\>"                      ; typename
     "[ \t\n\r]*[[]?[]]?"                        ; (could be array)
     "[ \t\n\r]+"                                ; whitespace
     "\\<[a-zA-Z0-9_$]+\\>"                      ; variable name
     "[ \t\n\r]*[[]?[]]?"                        ; (could be array)
     "[ \t\n\r]*,?\\)*"                          ; opt whitespace and comma
     "[ \t\n\r]*"                                ; optional whitespace
     ")"                                         ; end the param list
     ))

  (defun my:next-java-method()
    (interactive)
    (re-search-forward java-function-regexp nil t)
    (recenter))

  (defun my:prev-java-method()
    (interactive)
    (re-search-backward java-function-regexp nil t)
    (recenter))

  (defvar next-method-regexp "\\(class\\|def\\|public\\|private\\|protected\\|defun\\|defvar\\|[a-zA-Z0-9_$]+(\\)")

  (defun my:next-method()
    (interactive)
    (re-search-forward next-method-regexp nil t)
    (recenter))

  (defun my:prev-method()
    (interactive)
    (re-search-backward next-method-regexp nil t)
    (recenter))

  (defun my:previous-link-center()
    (interactive)
    (Info-prev-reference)
    (recenter))

  (defun my:next-link-center()
    (interactive)
    (Info-next-reference)
    (recenter))

  (defun my:agenda-view()
    (interactive)
    (org-agenda t "a")
    (org-agenda-day-view)
    (delete-other-windows)
    (org-agenda-redo-all))

  (defun my:helm-grep-do-git-grep()
    (interactive)
    (let ((current-prefix-arg 4))
    (call-interactively 'helm-grep-do-git-grep)))

  (defun my:replace-umlauts()
    (interactive)
    (beginning-of-buffer)
    (while (search-forward "ae" nil t)
      (replace-match "ä" nil t))
    (beginning-of-buffer)
    (while (search-forward "oe" nil t)
      (replace-match "ö" nil t))
    (beginning-of-buffer)
    (while (search-forward "ue" nil t)
      (replace-match "ü" nil t)))

  (defun my:umlaut-a()
    (interactive)
    (insert "ä"))
  (global-set-key (kbd "C-c k a") 'my:umlaut-a)

  (defun my:umlaut-o()
    (interactive)
    (insert "ö"))
  (global-set-key (kbd "C-c k o") 'my:umlaut-o)

  (defun my:umlaut-u()
    (interactive)
    (insert "ü"))
  (global-set-key (kbd "C-c k u") 'my:umlaut-u)

  (defun my:umlaut-s()
    (interactive)
    (insert "ß"))
  (global-set-key (kbd "C-c k s") 'my:umlaut-s)

  (defun my:get-filename()
    (interactive)
    (dired-jump)
    (dired-copy-filename-as-kill)
    (kill-this-buffer))
  (global-set-key (kbd "C-x y") 'my:get-filename)

  (defun my:projectile-magit()
    (interactive)
    (projectile-vc)
    (delete-other-windows))
  (global-set-key (kbd "C-c v") 'my:projectile-magit)

  (defun my:magit-log()
    (interactive)
    (magit-log-current nil nil nil)
    (delete-other-windows))
  (global-set-key (kbd "C-c L") 'my:magit-log)

  (defun my:new-line()
    (interactive)
    (move-end-of-line nil)
    (newline)
    (c-indent-line-or-region))
  (global-set-key (kbd "C-c n") 'my:new-line)
#+END_SRC
** key bindings, kbd
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "<f10>") 'tmm-menubar)
  (global-set-key (kbd "C-x q") 'goto-last-change)
  (global-set-key (kbd "C-<next>") 'next-buffer)
  (global-set-key (kbd "C-<prior>") 'previous-buffer)
  (global-set-key (kbd "C-x g") 'magit-status)
  (global-set-key (kbd "C-x p") 'projectile-switch-project)
  (global-set-key (kbd "C-x o") 'projectile-find-file)
  (global-set-key (kbd "C-x d") 'my:duplicate-line)
  (global-set-key (kbd "<C-iso-lefttab>") 'my:previous-link-center)
  (global-set-key (kbd "<C-tab>") 'completion-at-point)
  (global-set-key (kbd "C-c m") 'my:agenda-view)
  (global-set-key (kbd "C-S-<up>") 'my:prev-java-method)
  (global-set-key (kbd "C-S-<down>") 'my:next-java-method)
  (global-set-key (kbd "C-9") 'helm-imenu)
  (global-set-key (kbd "C-0") 'treemacs)
  (global-set-key (kbd "C-=") 'lsp-headerline-breadcrumb-mode)
  (global-set-key (kbd "C-`") 'my:helm-grep-do-git-grep)
  (global-set-key (kbd "C-8") 'whitespace-mode)
  (global-set-key (kbd "C-x t") 'bookmark-bmenu-list)
  (global-set-key (kbd "C-x 5 5") 'magit-blame)
  (global-set-key (kbd "C-x 5 6") 'magit-log-buffer-file)
  (global-set-key (kbd "C-<escape>") 'evil-mode)
  (global-set-key (kbd "C-'") 'treemacs-increase-width)
  (global-set-key (kbd "C-;") 'treemacs-decrease-width)
  (global-set-key (kbd "M-m") 'xref-pop-marker-stack)
  (global-set-key (kbd "M-,") 'xref-find-definitions)
  (global-set-key (kbd "M-n") 'evil-first-non-blank)
  (global-set-key (kbd "C-x w") 'overwrite-mode)
  (global-set-key (kbd "C-c y") 'my:copy-line-at-point)
  (global-set-key (kbd "C-c t") 'my:trim-whitespace)
  (global-set-key (kbd "C-c j") 'company-yasnippet)
  (global-set-key (kbd "C-c SPC") 'company-complete)
  (global-set-key (kbd "C-x e") 'eval-buffer)
  (global-set-key (kbd "C-x a t") 'ert-run-tests-interactively)
  (global-set-key (kbd "M-s s") 'swiper)
  (global-set-key (kbd "M-s a") 'swiper-all)
  (global-set-key (kbd "M-s d") 'swiper-helm)
  (global-set-key (kbd "C-s") 'swiper)
  (global-set-key (kbd "C-c d") 'lsp-ui-peek-find-definitions)
  (global-set-key (kbd "C-c i") 'lsp-ui-peek-find-implementation)
  (global-set-key (kbd "C-c e") 'lsp-execute-code-action)
  (global-set-key (kbd "C-x b") 'ido-switch-buffer)
  (global-set-key (kbd "C-x C-b") 'ido-switch-buffer)
  (global-set-key (kbd "C-<") '(lambda() (interactive) (scroll-right 10)))
  (global-set-key (kbd "C->") '(lambda() (interactive) (scroll-left 10)))
  (global-set-key (kbd "C-#") 'global-hl-line-mode)
  (global-set-key (kbd "C-x r 1") 'copy-to-register)
  (global-set-key (kbd "C-x r 2") 'helm-register)
  (global-set-key (kbd "C-@") 'helm-register)
  (global-set-key (kbd "C-+") 'helm-filtered-bookmarks)
  (global-set-key (kbd "C-{") 'hide-mode-line-mode)
#+END_SRC
** themes
#+BEGIN_SRC emacs-lisp
  (defvar chiaroscuro-index 0 "Index representing the current theme")
  (setq chiaroscuro-index 0)

  (setq themes-list '(chiaroscuro
                      chiaroscuro
                      chiaroscuro
                      chiaroscuro
                      chiaroscuro
                      chiaroscuro
                      chiaroscuro
                      chiaroscuro
                      chiaroscuro))

  (setq themes-list-names '("eclipse"
                            "terminal"
                            "dune"
                            "night"
                            "blue"
                            "neon"
                            "light"
                            "linux"
                            "caravaggio"))

  (defvar theme-index 0 "Index representing the current theme")
  (setq theme-index 0)
  (setq number-of-themes (length themes-list))

  (defun my:disable-themes()
    (interactive)
    (setq loop-index 0)
    (while (< loop-index number-of-themes)
      (disable-theme (nth loop-index themes-list))
      (setq loop-index (+ loop-index 1))))

  (defun my:reset-themes-index()
    (interactive)
    (setq theme-index 0)
    (setq CHIAROSCURO-INDEX 0)
    (my:disable-themes))
  (global-set-key (kbd "C-5") 'my:reset-themes-index)

  (defun my:theme-down()
    (interactive)
    (setq theme-index (- theme-index 1))
    (setq CHIAROSCURO-INDEX (- CHIAROSCURO-INDEX 1))
    (my:toggle-themes))
  (global-set-key (kbd "C-x 6") 'my:theme-down)

  (defun my:theme-up()
    (interactive)
    (setq theme-index (+ theme-index 1))
    (setq CHIAROSCURO-INDEX (+ CHIAROSCURO-INDEX 1))
    (my:toggle-themes))
  (global-set-key (kbd "C-~") 'my:theme-up)

  (defun my:loop()
    (interactive)
    (setq loop-index 1)
    (setq themes-list-index 0)
    (while (<= loop-index number-of-themes)
      (if (eq theme-index loop-index)
          (progn
            (load-theme (nth themes-list-index themes-list) t)
            (message "%s" (nth themes-list-index themes-list-names))))
      (setq loop-index (+ loop-index 1))
      (setq themes-list-index (+ themes-list-index 1))))

  (defun my:toggle-themes()
    (interactive)
    (my:disable-themes)

    (if (eq theme-index -1)
        (progn (setq theme-index number-of-themes)))

    (if (eq theme-index 0)
        (progn (message "emacs")
               (setq theme-index 0)
               (setq CHIAROSCURO-INDEX 0)))

    (my:loop)

    (if (> theme-index number-of-themes)
        (progn (message "emacs")
               (setq theme-index 0)
               (setq CHIAROSCURO-INDEX 0))))
#+END_SRC
** dap-debug template
#+BEGIN_SRC emacs-lisp
  (dap-register-debug-template "My Runner1"
                               (list :type "java"
                                     :request "launch"
                                     :args "heeeeeeeeeello"
                                     :vmArgs ""
                                     :projectName "maven_sandbox"
                                     :mainClass "org.sandbox.Main"
                                     :env '(("DEV" . "1"))))

  (dap-register-debug-template "My Runner2"
                               (list :type "java"
                                     :request "launch"
                                     :args "1 2 3 4 5 6"
                                     :vmArgs ""
                                     :projectName "maven_sandbox"
                                     :mainClass "org.sandbox.Main"
                                     :env '(("DEV" . "1"))))
#+END_SRC
** custom minor logger mode
#+BEGIN_SRC emacs-lisp
  (define-minor-mode my-logger-mode
    "Custom mode for following logs.")
  (add-hook 'my-logger-mode-hook 'my:my-logger-colorize-background)

  (defun my:my-logger-colorize-background()
  (interactive)
    (highlight-regexp "treemacs")
    ;(setq buffer-face-mode-face '(:background "red"))
    (buffer-face-mode 1))
#+END_SRC
** custom minor foo mode
See https://nullprogram.com/blog/2013/02/06/
#+BEGIN_SRC emacs-lisp
(make-variable-buffer-local
 (defvar foo-count 0
   "Number of foos inserted into the current buffer."))

(defun insert-foo ()
  (interactive)
  (setq foo-count (1+ foo-count))
  (insert "foo"))

;;;###autoload
(define-minor-mode foo-mode
  "Get your foos in the right places."
  :lighter " foo"
  :keymap (let ((map (make-sparse-keymap)))
            (define-key map (kbd "C-c f") 'insert-foo)
            map))

;;;###autoload
(add-hook 'text-mode-hook 'foo-mode)

(provide 'foo-mode)
#+END_SRC
** change theme on startup
#+BEGIN_SRC emacs-lisp
  (setq CHIAROSCURO-INDEX 0)
  (my:theme-up)
#+END_SRC

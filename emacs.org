* emacs
** archives and startup
#+BEGIN_SRC emacs-lisp
(setq INDEX-CHIAROSCURO 0)

(setq theme-index 0)

(setq iterations 1)
(setq mode-line-fringe t)

(setq warning-minimum-level :emergency)

(package-initialize)

(require 'package)

(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("elpa" . "https://elpa.gnu.org/packages/")
                         ("org" . "https://orgmode.org/elpa/")))

(unless package-archive-contents (package-refresh-contents))

(setq package-list '(ace-window
                     ag
                     arduino-cli-mode
                     arduino-mode
                     auto-complete
                     bookmark-in-project
                     chess
                     clang-format
                     company
                     company-box
                     counsel
                     counsel-projectile
                     counsel-web
                     diminish
                     dired-narrow
                     drag-stuff
                     eglot
                     eglot-java
                     expand-region
                     elfeed
                     engine-mode
                     evil
                     evil-mc
                     focus
                     git-gutter
                     gnuplot
                     go-mode
                     google-translate
                     goto-last-change
                     helm-bm
                     helm-projectile
                     helm-swoop
                     hide-mode-line
                     highlight
                     hnreader
                     ibuffer-vc
                     iedit
                     itail
                     ivy
                     json-mode
                     json-snatcher
                     lsp-java
                     lsp-ui
                     luwak
                     magit
                     magit-find-file
                     move-text
                     nov
                     olivetti
                     openwith
                     org-kanban
                     ox-jira
                     powershell
                     projectile
                     rainbow-mode
                     speed-type
                     shx
                     swiper-helm
                     treemacs-projectile
                     use-package
                     visual-regexp
                     which-key
                     xterm-color
                     ztree
                     ))

(dolist (package package-list)
  (unless (package-installed-p package) (package-install package)))
#+END_SRC
** auto-complete
#+BEGIN_SRC emacs-lisp
(global-auto-complete-mode t)
(setq ac-auto-show-menu nil)
(global-set-key (kbd "C-<tab>") 'auto-complete)
#+END_SRC
** behavior
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-<down>") 'scroll-up-line)
(global-set-key (kbd "C-<up>") 'scroll-down-line)

(setq make-backup-files nil)

(global-set-key (kbd "M-o") 'ace-window)

(setq ring-bell-function 'ignore)

(global-set-key (kbd "C-x q") 'goto-last-change)

(show-paren-mode t)
(setq show-paren-style 'parenthesis)

(setq-default truncate-lines t)

(add-hook 'c-mode-common-hook
          (lambda () (subword-mode t)))
(add-hook 'java-mode-common-hook
          (lambda () (subword-mode t)))

(setq sentence-end-double-space nil)

(whitespace-mode -1)

(setq compile-command "mvn install")

(setq-default indent-tabs-mode nil)
(setq-default tab-width 4)

(delete-selection-mode t)
#+END_SRC
** chess
#+BEGIN_SRC emacs-lisp
(setq chess-images-directory "~/source/emacs/xboard/")
(setq chess-images-default-size 75)
#+END_SRC
** <class overview>
#+BEGIN_SRC emacs-lisp
(defun my:find-files-in-project (directory extension)
  "List files with a specific extension in all subdirectories of DIRECTORY."
  (let ((file-list '()))
    (dolist (file (directory-files-recursively directory (concat "\\." extension "$")))
      (when (file-regular-p file)
        (push file file-list)))
    (message "my:find-files-in-project() Length of the list: %d" (length file-list))
    file-list))

(defun my:get-java-parents (file-path)
  "Parse a Java file to extract its parent classes and implemented interfaces."
  (with-temp-buffer
    (insert-file-contents file-path)
    (goto-char (point-min))
    (let (parents)
      (while (re-search-forward "\\bextends\\s-+\\(\\(?:[[:alnum:]_$]+\\.\\)*[[:alnum:]_$]+\\)\\b" nil t)
        (setq parents (cons (match-string 1) parents)))
      (goto-char (point-min)) ;; Reset cursor position
      (while (re-search-forward "\\bimplements\\s-+\\(\\(?:[[:alnum:]_$]+\\.\\)*[[:alnum:]_$]+\\)\\b" nil t)
        (setq parents (cons (match-string 1) parents)))
      parents)))

(defun my:parse-java-file-for-members (file-path)
  "Parse a Java file to extract member types (fields, methods) with variable names."
  (with-temp-buffer
    (insert-file-contents file-path)
    (goto-char (point-min))
    (let ((result ""))
      (while (re-search-forward "^\\s-*\\b\\(?:private\\|public\\|protected\\)\\b[^;\n]*;" nil t)
        (setq result (concat result (buffer-substring-no-properties
                                     (line-beginning-position)
                                     (line-end-position))
                             "\n")))
      result)))

(defun my:print-data-in-new-buffer (file-list)
  "Print DATA in a new buffer."
  (let ((new-buffer (get-buffer-create "*ClassOverview*"))
        (content ""))
    (with-current-buffer new-buffer
      (erase-buffer)
      (cl-loop for element in file-list
               for index from 1
               do
               (setq content (concat content (format "%d: %s\n" index (file-name-sans-extension (file-name-nondirectory element)) (my:get-java-parents element))))
               (dolist (element2 (my:get-java-parents element))
                                        ; Parents
                 (if element2
                     (progn
                       (setq content (concat content (format "--------------------------------------------------------------------------------\n")))
                       (setq content (concat content (format "    %s\n" element2)))
                       ))
                                        ; Members
                 (if (my:parse-java-file-for-members element)
                     (progn
                       (setq content (concat content (format "--------------------------------------------------------------------------------\n")))
                       (setq content (concat content (my:parse-java-file-for-members element)))
                       ))
                 )
               (setq content (concat content (format "________________________________________________________________________________\n\n")))
               )
      )
    (switch-to-buffer new-buffer)
    (insert content)))

(defun my:test ()
  "Test function"
  (interactive)
  (my:parse-java-file-for-members "/home/computer/source/lsp_sandbox/src/main/java/org/sandbox/observerpattern/ObserverA.java")
  )

(defun my:class-overview ()
  "Parse all classes of a project and print the class overview."
  (interactive)
  (let ((project-root (projectile-project-root)))
    (if project-root
        (let ((file-list (my:find-files-in-project project-root "java")))
          (message "my:class-overview() Length of the list: %d" (length file-list))

          ;; TODO: Parse each file for members
          ;; TODO: Print data

          (my:print-data-in-new-buffer file-list))
      (message "Not in a Projectile project or Projectile is not active."))))
#+END_SRC
** company
#+BEGIN_SRC emacs-lisp
                                        ;(add-hook 'after-init-hook 'global-company-mode)
                                        ;(global-set-key (kbd "C-c j") 'company-yasnippet)
                                        ;(global-set-key (kbd "C-c SPC") 'company-complete)
#+END_SRC
** counsel-projectile
#+BEGIN_SRC emacs-lisp
(require 'counsel-projectile)
(use-package counsel-projectile)
(counsel-projectile-mode t)
#+END_SRC
** drag-stuff
#+BEGIN_SRC emacs-lisp
(require 'drag-stuff)

(drag-stuff-mode t)
(global-set-key (kbd "M-<up>") 'drag-stuff-up)
(global-set-key (kbd "M-<down>") 'drag-stuff-down)
(global-set-key (kbd "C-S-M-<left>") 'drag-stuff-left)
(global-set-key (kbd "C-S-M-<right>") 'drag-stuff-right)
#+END_SRC
** ediff
#+BEGIN_SRC emacs-lisp
(setq ediff-split-window-function 'split-window-horizontally)
#+END_SRC
** eglot java
#+BEGIN_SRC emacs-lisp
(cond
 ((string-equal system-type "gnu/linux")
  (progn
    (add-hook 'java-mode-hook 'eglot-java-mode)
    (add-hook 'eglot-java-mode-hook (lambda ()
                                      (define-key eglot-java-mode-map (kbd "C-c l n") #'eglot-java-file-new)
                                      (define-key eglot-java-mode-map (kbd "C-c l x") #'eglot-java-run-main)
                                      (define-key eglot-java-mode-map (kbd "C-c l t") #'eglot-java-run-test)
                                      (define-key eglot-java-mode-map (kbd "C-c l N") #'eglot-java-project-new)
                                      (define-key eglot-java-mode-map (kbd "C-c l T") #'eglot-java-project-build-task)
                                      (define-key eglot-java-mode-map (kbd "C-c l R") #'eglot-java-project-build-refresh))))))
#+END_SRC
** elfeed
#+BEGIN_SRC emacs-lisp
(require 'elfeed)
(setq elfeed-feeds '(
                     ("https://rss.orf.at/news.xml" news orf)
                     ("https://rss.orf.at/steiermark.xml" news orf steiermark)
                     ("https://sachachua.com/blog/category/emacs-news/feed/" emacs)
                     ("https://www.comicsrss.com/rss/dilbert.rss" comics dilbert)
                     ("https://www.comicsrss.com/rss/dilbert-classics.rss" comics dilbert classics)
                     ("https://www.comicsrss.com/rss/eek.rss" comics eek)
                     ("https://www.comicsrss.com/rss/garfield-classics.rss" comics garfield classics)
                     ("https://www.comicsrss.com/rss/garfield.rss" comics garfield)
                     ("https://www.comicsrss.com/rss/peanuts.rss" comics peanuts)
                     ))
#+END_SRC
** engine mode
#+BEGIN_SRC emacs-lisp
(require 'engine-mode)
(engine-mode t)

(defengine google
  "http://www.google.com/search?ie=utf-8&oe=utf-8&q=%s"
  :keybinding "g")

(defengine stackoverflow
  "https://stackoverflow.com/search?q=%s"
  :keybinding "s")

(defengine wikipedia
  "http://www.wikipedia.org/search-redirect.php?language=en&go=Go&search=%s"
  :keybinding "w")
#+END_SRC
** environment setup
Load environment variables properly by installing *exec-path-from-shell*.
#+BEGIN_SRC emacs-lisp
(use-package exec-path-from-shell :ensure t)
(exec-path-from-shell-initialize)
#+END_SRC
** evil
#+BEGIN_SRC emacs-lisp
(use-package evil)
(require 'evil)
(evil-mode nil)

(setq evil-default-state 'emacs)

(evil-set-initial-state 'Info-mode 'emacs)
(evil-set-initial-state 'grep-mode 'emacs)
(evil-set-initial-state 'java-mode 'emacs)
(evil-set-initial-state 'apropos-mode 'emacs)
(evil-set-initial-state 'eshell-mode 'emacs)
(evil-set-initial-state 'shell-mode 'emacs)
(evil-set-initial-state 'eww-mode 'emacs)
(evil-set-initial-state 'Buffer-menu-mode 'emacs)
(evil-set-initial-state 'help-mode 'emacs)
(evil-set-initial-state 'compilation-mode 'emacs)
#+END_SRC
** eww
#+BEGIN_SRC emacs-lisp
(setq eww-search-prefix "https://www.google.com/search?q=")

(setq shr-use-fonts  nil) ; No special fonts
(setq shr-use-colors nil) ; No colors
(setq shr-indentation 2) ; Left-side margin
(setq shr-width 80) ; Fold text

(cond
 ((string-equal system-type "windows-nt")
  (progn (setq browse-url-browser-function 'browse-url-generic browse-url-generic-program "C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe") (message "windows-nt")))
 ((string-equal system-type "gnu/linux")
  (progn (setq browse-url-browser-function 'browse-url-generic browse-url-generic-program "google-chrome") (message "linux"))))
#+END_SRC
** expand-region
#+BEGIN_SRC emacs-lisp
(require 'expand-region)
(global-set-key (kbd "C-=") 'er/expand-region)
(global-set-key (kbd "C-+") 'er/contract-region)
#+END_SRC
** focus
#+BEGIN_SRC emacs-lisp
(require 'focus)
#+END_SRC
** google-translate
#+BEGIN_SRC emacs-lisp
(require 'google-translate)
(require 'google-translate-default-ui)
(global-set-key (kbd "C-c P") 'google-translate-at-point)
(global-set-key (kbd "C-c R") 'google-translate-query-translate-reverse)
(setq google-translate-default-source-language "en")
(setq google-translate-default-target-language "fr")
#+END_SRC
** helm
#+BEGIN_SRC emacs-lisp
(setq helm-full-frame t)
(use-package helm
  :ensure t
  :init
  (helm-mode t)
  (progn (setq helm-buffers-fuzzy-matching t))
  :bind
  (("M-x" . helm-M-x))
  (("C-c k r" . helm-show-kill-ring))
  (("C-c h" . helm-grep-do-git-grep))
  (("C-r"   . helm-swoop))
  (("C-c b" . helm-buffers-list))
  (("C-c r" . helm-bookmarks))
  (("C-c i" . helm-mini))
  (("C-c q" . helm-info)))
#+END_SRC
** helm-projectile
#+BEGIN_SRC emacs-lisp
(require 'helm-projectile)
(helm-projectile-on)
#+END_SRC
** hydra code
#+BEGIN_SRC emacs-lisp
(defhydra hydra-code (:hint nil :color red)

  "
  Code

  ^LSP^             ^Git^           ^Search^                    ^Project^   ^Diff^            ^Build^
  ^^^^^------------------------------------------------------------------------------------------------
  _!_: Add hook     _g_: status     _1_: dired-do-find-regexp   _c_: root   _E_: buffers      _-_: compile
  _@_: Start        _l_: log        _2_: helm-projectile        _f_: files  _A_: directories  _=_: lsp
  _#_: Remove hook  _L_: log file   _3_: helm-git-grep          ^ ^         _n_: branches     ^ ^
  _$_: Shutdown     _b_: blame      _4_: buffers                ^ ^         _m_: magit-diff   ^ ^
  ^ ^               _B_: region     _5_: grep-in-project        ^ ^         ^ ^               ^ ^
  ^ ^               ^ ^             _6_: grep-in-project2       ^ ^         ^ ^               ^ ^
  ^ ^               ^ ^             ^ ^                         ^ ^         ^ ^               ^ ^
  "

  ("!" (my:add-lsp-hook))
  ("@" (lsp))
  ("#" (my:remove-lsp-hook))
  ("$" (lsp-shutdown-workspace))

  ("g" (my:projectile-magit))
  ("l" (magit-log))
  ("L" (magit-log-buffer-file))
  ("b" (magit-blame))
  ("B" (magit-file-dispatch))

  ("1" my:dired-projectile-search)
  ("2" my:helm-projectile-grep)
  ("3" helm-grep-do-git-grep)
  ("4" swiper-all)
  ("5" my:grep-in-project)
  ("6" my:grep-in-project2)

  ("c" (project-dired))
  ("f" (counsel-projectile))

  ("E" ediff-buffers)
  ("A" ediff-directories)
  ("n" magit-diff-range)
  ("m" magit-diff)

  ("-" compile)
  ("=" lsp-java-build-project)

  ("q" nil "Quit" :color blue))
#+END_SRC
** hydra emacs
#+BEGIN_SRC emacs-lisp
(defhydra hydra-emacs (:hint nil :color red)

  "
  Emacs

  ^Folders^        ^Files^             ^Update^             ^Themes^                   ^Buffers^
  ^^^^^^^^-------------------------------------------------------------------------------------------------
  _a_: emacs       _d_: emacs.org      _h_: cp .emacs.d     _k_: reset   _1_: Default  _'_: ibuffers
  _s_: .emacs.d    _f_: chiaro...el    _j_: fullscreen      _l_: up      _2_: Eclipse  _b_: bookmarks
  ^ ^              _g_: linux.el       ^ ^                  _;_: down    _3_: Neon     ^ ^
  ^ ^              ^ ^                 ^ ^                  ^ ^          _4_: Yellow   ^ ^
  ^ ^              ^ ^                 ^ ^                  ^ ^          _5_: Palette  ^ ^
  ^ ^              ^ ^                 ^ ^                  ^ ^          _6_: Gray     ^ ^
  ^ ^              ^ ^                 ^ ^                  ^ ^          _7_: Red      ^ ^
  ^ ^              ^ ^                 ^ ^                  ^ ^          _8_: High C.  ^ ^
  ^ ^              ^ ^                 ^ ^                  ^ ^          _9_: Light    ^ ^
  ^ ^              ^ ^                 ^ ^                  ^ ^          _0_: Dark     ^ ^
  "

  ("a" (dired "~/source/emacs"))
  ("s" (dired "~/.emacs.d"))

  ("d" (find-file "~/source/emacs/emacs.org"))
  ("f" (find-file "~/source/emacs/chiaroscuro-theme.el"))
  ("g" (find-file "~/source/emacs/linux.el"))

  ("h" (lambda () (interactive)
         (progn
           (shell-command "cd ~/.emacs.d ; cp -r ~/source/emacs/* .")
           (my:open-and-eval-init-file)
           (toggle-frame-fullscreen))))
  ("j" (toggle-frame-fullscreen))

  ("k" (my:reset-themes-index))
  ("l" (my:theme-up))
  (";" (my:theme-down))

  ("1" (my:set-theme INDEX-DEFAULT))
  ("2" (my:set-theme INDEX-ECLIPSE))
  ("3" (my:set-theme INDEX-NEON))
  ("4" (my:set-theme INDEX-YELLOW))
  ("5" (my:set-theme INDEX-PALETTE))
  ("6" (my:set-theme INDEX-GRAY))
  ("7" (my:set-theme INDEX-RED))
  ("8" (my:set-theme INDEX-HIGH-CONTRAST))
  ("9" (my:set-theme INDEX-COLOR-CHANGE-LIGHT))
  ("0" (my:set-theme INDEX-COLOR-CHANGE-DARK))

  ("'" (ibuffer))
  ("b" list-bookmarks)

  ("q" nil "Quit" :color blue))
#+END_SRC
** hydra file
#+BEGIN_SRC emacs-lisp
(defhydra hydra-file (:hint nil :color red)

  "
  File

  ^File^              ^Lsp^             ^Misc^          ^Modify^             ^Project^
  ^^^^^-------------------------------------------------------------------------------------------------
  _l_: line numbers   _i_: imenu        _C_: focus      _c_: cua             _{_: highlight on
  _w_: whitespace     _T_: treemacs     ^ ^             _o_: overwrite       _}_: highlights off
  _s_: spaces         ^ ^               ^ ^             ^ ^                  ^ ^
  _t_: tabs           ^ ^               ^ ^             ^ ^                  ^ ^
  "

  ("l" (my:toggle-line-numbers))
  ("w" (my:toggle-whitespace))
  ("s" (my:enable-spaces))
  ("t" (my:enable-tabs))

  ("i" (helm-imenu))
  ("T" (treemacs))

  ("C" (my:toggle-focus-mode))

  ("c" (my:toggle-cua-mode))
  ("o" (overwrite-mode))

  ("{" (hlt-highlight))
  ("}" (hlt-unhighlight-region))

  ("q" nil "Quit" :color blue))
#+END_SRC
** hydra master
#+BEGIN_SRC emacs-lisp
(defhydra hydra-master (:color blue)
  ""
  ("a" hydra-emacs/body "Emacs")
  ("f" hydra-file/body "File")
  ("r" hydra-registers/body "Registers")
  ("c" hydra-code/body "Code")
  ("w" hydra-window/body "Window")
  ("k" hydra-custom/body "Custom")
  ("q" nil "Quit" :color red))

(global-set-key (kbd "C-`") 'hydra-master/body)
#+END_SRC
** hydra programs
#+BEGIN_SRC emacs-lisp
(defhydra hydra-programs (:hint nil :color red)

  "
  Programs

  ^Web Surfing^    ^Reading^
  ^^^^^^^^-----------------------------
  _a_: eww         _d_: elfeed
  _s_: luwak       _f_: gnus
  "
  ("a" eww)
  ("s" luwak-search)

  ("d" elfeed)
  ("f" gnus)

  ("q" nil "Quit" :color blue))

(defun my:open-and-eval-init-file ()
  "Open and eval init file."
  (interactive)
  (my:kill-init-buffer)
  (find-file "~/.emacs.d/init.el")
  (eval-buffer)
  (toggle-frame-fullscreen)
  (kill-buffer))

(defun my:kill-init-buffer ()
  "Kill init buffer."
  (interactive)
  (let ((buffer-name "init.el"))
    (when (get-buffer buffer-name)
      (kill-buffer buffer-name))))

(defun my:toggle-line-numbers ()
  "Toggle line numbers."
  (if global-display-line-numbers-mode
      (progn
        (global-display-line-numbers-mode -1))
    (progn
      (global-display-line-numbers-mode t))))

(defun my:toggle-whitespace ()
  "Toggle whitespace."
  (if whitespace-mode
      (progn
        (whitespace-mode -1))
    (progn
      (whitespace-mode t))))

(defun my:toggle-focus-mode ()
  "Toggle focus-mode."
  (if focus-mode
      (progn
        (focus-mode -1))
    (progn
      (focus-mode t))))

(defun my:toggle-cua-mode ()
  "Toggle 'cua-mode'."
  (if cua-mode
      (progn
        (cua-mode -1))
    (progn
      (cua-mode t))))

(defun my:company-on ()
  "Company on."
  (progn
    (message "Company on")
    (global-company-mode t)
    ))

(defun my:company-off ()
  "Company off."
  (progn
    (message "Company off")
    (global-company-mode -1)
    ))

(defun my:eglot-on ()
  "Eglot on."
  (progn (message "Eglot on")
         (eglot-java-mode)
         (add-hook 'java-mode-hook 'eglot-java-mode)))

(defun my:eglot-off ()
  "Eglot off."
  (progn (message "Eglot off")
         (eglot-shutdown-all)))

(defun my:lsp-on ()
  "Lsp on."
  (progn (message "Lsp on")
         (lsp)
         (add-hook 'java-mode-hook #'lsp)
         ))

(defun my:lsp-off ()
  "Lsp off."
  (progn (message "Lsp off")
         (lsp-shutdown-workspace)

         (remove-hook 'java-mode-hook (lambda () 'lsp))
         ))

(defun my:enable-spaces ()
  "Enable spaces."
  (progn (message "Enable spaces")
         (setq-default indent-tabs-mode nil)
         ))

(defun my:enable-tabs ()
  "Enable tabs."
  (progn (message "Enable tabs")
         (setq-default indent-tabs-mode t)
         (setq-default tab-width 4)
         ))

#+END_SRC
** hydra registers
#+BEGIN_SRC emacs-lisp
(defhydra hydra-registers (:hint nil :color red)

  "
  Registers

  ^Registers^
  ^^^^^---------------------
  _1_: Point to register
  _2_: Jump to register
  _3_: Copy to register
  _4_: Insert register
  _5_: List
  _6_: Helm
  ^ ^
  "

  ("1" point-to-register)
  ("2" jump-to-register)
  ("3" copy-to-register)
  ("4" insert-register)
  ("5" list-registers)
  ("6" (helm-register))

  ("q" nil "Quit" :color blue))
#+END_SRC
** hydra window
#+BEGIN_SRC emacs-lisp
(defhydra hydra-window (:hint nil :color red)

  "
  Window

  ^Split^         ^Horizontally^      ^Vertically^       ^Menu/Tool-bar^
  ^^^^^^^^-------------------------------------------------------------------
  _1_: right      _3_: shrink         _5_: shrink        _7_: menu-bar
  _2_: below      _4_: enlarge        _6_: enlarge
  "
  ("1" split-window-right)
  ("2" split-window-below)

  ("3" shrink-window-horizontally)
  ("4" enlarge-window-horizontally)

  ("5" shrink-window)
  ("6" enlarge-window)

  ("7" my:toggle-menu-bar-tool-bar)

  ("q" nil "Quit" :color blue))
#+END_SRC
** ibuffer-vc
#+BEGIN_SRC emacs-lisp
(add-hook 'ibuffer-hook
          (lambda ()
            (ibuffer-vc-set-filter-groups-by-vc-root)
            (unless (eq ibuffer-sorting-mode 'alphabetic)
              (ibuffer-do-sort-by-alphabetic))))

(setq ibuffer-formats
      '((mark modified read-only " "
              (name 75 75 :left :elide)
              " "
              (size 9 -1 :right)
              " "
              (mode 16 16 :left :elide)
              " " filename-and-process)
        (mark " "
              (name 16 -1)
              " " filename)))
#+END_SRC
** iedit
#+BEGIN_SRC emacs-lisp
(require 'iedit)
#+END_SRC
** imenu
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-9") 'helm-semantic-or-imenu)
#+END_SRC
** indent-rigidly
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "S-M-<left>") 'indent-rigidly-left)
(global-set-key (kbd "S-M-<right>") 'indent-rigidly-right)
#+END_SRC
** ivy
#+BEGIN_SRC emacs-lisp
(ivy-mode)
(setq ivy-use-virtual-buffers t)
(setq enable-recursive-minibuffers t)
#+END_SRC
** json-snatcher
#+BEGIN_SRC emacs-lisp
(require 'json-snatcher)

(defun js-mode-bindings ()
  "Sets a hotkey for using the json-snatcher plugin"
  (when (string-match  "\\.json$" (buffer-name))
    (local-set-key (kbd "C-c C-g") 'jsons-print-path)))
(add-hook 'js-mode-hook 'js-mode-bindings)
(add-hook 'js2-mode-hook 'js-mode-bindings)
#+END_SRC
** key bindings, kbd
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-<next>") #'(lambda() (interactive) (scroll-left 10)))
(global-set-key (kbd "M-<prior>") #'(lambda() (interactive) (scroll-right 10)))
(global-set-key (kbd "<tabs>") 'complete-symbol)
(global-set-key (kbd "C-1") 'delete-other-windows)
(global-set-key (kbd "C-8") 'whitespace-mode)
(global-set-key (kbd "C-<escape>") 'evil-mode)
(global-set-key (kbd "C-<next>") 'next-buffer)
(global-set-key (kbd "C-<prior>") 'previous-buffer)
(global-set-key (kbd "C-c b") 'helm-filtered-bookmarks)
(global-set-key (kbd "C-c i") 'my:projectile-ibuffer)
(global-set-key (kbd "C-c m") 'my:agenda-view)
(global-set-key (kbd "C-x / ,") 'helm-global-mark-ring)
(global-set-key (kbd "C-x / .") 'helm-mark-ring)
(global-set-key (kbd "C-x / /") 'helm-all-mark-rings)
(global-set-key (kbd "C-x / b") 'project-list-buffers)
(global-set-key (kbd "C-x / c") 'my:class-overview)
(global-set-key (kbd "C-x / e") 'helm-register)
(global-set-key (kbd "C-x / f") 'find-lisp-find-dired)
(global-set-key (kbd "C-x / i") 'org-insert-link)
(global-set-key (kbd "C-x / k") 'helm-show-kill-ring)
(global-set-key (kbd "C-x / l") 'org-store-link)
(global-set-key (kbd "C-x / m") 'c-mark-function)
(global-set-key (kbd "C-x / o") 'occur)
(global-set-key (kbd "C-x / p") 'point-to-register)
(global-set-key (kbd "C-x / r") 'copy-to-register)
(global-set-key (kbd "C-x 5 5") 'magit-blame)
(global-set-key (kbd "C-x 5 6") 'magit-log-buffer-file)
(global-set-key (kbd "M-,") 'xref-find-definitions)
(global-set-key (kbd "M-g M-g") 'avy-goto-line)
(global-set-key (kbd "M-m") 'xref-pop-marker-stack)
(global-set-key (kbd "M-n") 'evil-first-non-blank)
(global-set-key (kbd "C-b") 'ivy-switch-buffer)
(global-set-key (kbd "C-v") 'helm-all-mark-rings)
(global-set-key (kbd "C-k") 'helm-show-kill-ring)

(global-set-key (kbd "C-x C-b") 'ivy-switch-buffer)

(global-set-key (kbd "C-n") 'helm-mini)
#+END_SRC
** look
#+BEGIN_SRC emacs-lisp
(menu-bar-mode 0)
(tool-bar-mode 0)
(scroll-bar-mode 0)

(fringe-mode '(20 . 20))
(defvar my:fringe 1)

(setq user-cache-directory (concat EMACS-HOME "cache"))

(setq blink-cursor-blinks 0)

(setq display-line-numbers-type 'absolute)
(global-set-key (kbd "C-7") 'global-display-line-numbers-mode)

(display-time)

(fset 'yes-or-no-p 'y-or-n-p)

(setq confirm-kill-emacs 'y-or-n-p)

;; increase height of which-key
(setq max-mini-window-height 0.9)
(setq which-key-side-window-max-height 0.9)

(defvar default-font-size 0 "Global Emacs default font size")
(defvar font-size 0 "Global Emacs font size")
(setq font-size 200)
(setq default-font-size 200)
(cond
 ((string-equal system-type "windows-nt")
  (progn (setq default-font-size 150) (setq font-size 150)))
 ((string-equal system-type "gnu/linux")
  (cond
   ((string-equal LINUX-VERSION "ubuntu")
    (progn (setq default-font-size 180) (setq font-size 180)))
   ((string-equal LINUX-VERSION "raspberrypi")
    (progn (setq default-font-size 200) (setq font-size 200))))))
(set-face-attribute 'default nil :height font-size)

(setq inhibit-startup-screen t)
#+END_SRC
** lsp
#+BEGIN_SRC emacs-lisp
(defun my:add-lsp-hook ()
  "Add lsp hook."
  (interactive)
  (add-hook 'java-mode-hook #'lsp))
(global-set-key (kbd "C-c 1") 'my:add-lsp-hook)

(defun my:remove-lsp-hook ()
  "Remove lsp hook."
  (interactive)
  (remove-hook 'java-mode-hook #'lsp))
(global-set-key (kbd "C-c 2") 'my:remove-lsp-hook)

(global-set-key (kbd "C-c 3") 'lsp-shutdown-workspace)

(require 'lsp-java)
#+END_SRC
** mode-line
#+BEGIN_SRC emacs-lisp
(require 'hide-mode-line)
(column-number-mode)
(display-time-mode 1)
(setq display-time-24hr-format t)

(setq-default mode-line-format (delq 'mode-line-modes mode-line-format))
#+END_SRC
** movement, avy
#+BEGIN_SRC emacs-lisp
(defun my:avy-lightning-clean-up ()
  (set-face-attribute 'default                           nil  :foreground text-normal       )
  (set-face-attribute 'font-lock-bracket-face            nil  :foreground text-highlight-1  ) 
  (set-face-attribute 'font-lock-builtin-face            nil  :foreground text-type         ) 
  (set-face-attribute 'font-lock-comment-delimiter-face  nil  :foreground text-lower        ) 
  (set-face-attribute 'font-lock-comment-face            nil  :foreground text-lower        ) 
  (set-face-attribute 'font-lock-constant-face           nil  :foreground text-constant     ) 
  (set-face-attribute 'font-lock-doc-face                nil  :foreground text-lower        ) 
  (set-face-attribute 'font-lock-function-call-face      nil  :foreground text-highlight-1  ) 
  (set-face-attribute 'font-lock-function-name-face      nil  :foreground text-function     ) 
  (set-face-attribute 'font-lock-keyword-face            nil  :foreground text-keyword      ) 
  (set-face-attribute 'font-lock-number-face             nil  :foreground text-highlight-1  ) 
  (set-face-attribute 'font-lock-preprocessor-face       nil  :foreground text-preprocessor ) 
  (set-face-attribute 'font-lock-string-face             nil  :foreground text-low          ) 
  (set-face-attribute 'font-lock-type-face               nil  :foreground text-type         ) 
  (set-face-attribute 'font-lock-variable-name-face      nil  :foreground text-variable     ) 
  (set-face-attribute 'font-lock-variable-use-face       nil  :foreground text-constant     ) 
  (set-face-attribute 'font-lock-warning-face            nil  :foreground text-warning      )
)

(defun my:avy-lightning ()
  "Change default text while avy is active."
  (interactive)

  (unwind-protect
      (progn
        ;; Protected forms: code that may raise an error
        (set-face-attribute 'default                           nil  :foreground text-low )
        (set-face-attribute 'font-lock-bracket-face            nil  :foreground text-low ) 
        (set-face-attribute 'font-lock-builtin-face            nil  :foreground text-low ) 
        (set-face-attribute 'font-lock-comment-delimiter-face  nil  :foreground text-low ) 
        (set-face-attribute 'font-lock-comment-face            nil  :foreground text-low ) 
        (set-face-attribute 'font-lock-constant-face           nil  :foreground text-low ) 
        (set-face-attribute 'font-lock-doc-face                nil  :foreground text-low ) 
        (set-face-attribute 'font-lock-function-call-face      nil  :foreground text-low ) 
        (set-face-attribute 'font-lock-function-name-face      nil  :foreground text-low ) 
        (set-face-attribute 'font-lock-keyword-face            nil  :foreground text-low ) 
        (set-face-attribute 'font-lock-number-face             nil  :foreground text-low ) 
        (set-face-attribute 'font-lock-preprocessor-face       nil  :foreground text-low ) 
        (set-face-attribute 'font-lock-string-face             nil  :foreground text-low ) 
        (set-face-attribute 'font-lock-type-face               nil  :foreground text-low ) 
        (set-face-attribute 'font-lock-variable-name-face      nil  :foreground text-low ) 
        (set-face-attribute 'font-lock-variable-use-face       nil  :foreground text-low ) 
        (set-face-attribute 'font-lock-warning-face            nil  :foreground text-low )
  
        (avy-goto-char-timer)

        (my:avy-lightning-clean-up)
        )
    ;; Cleanup forms: code that will always be executed
    (my:avy-lightning-clean-up)
    ))

(setq avy-timeout-seconds 0.25)

(defvar my-prefix-map (make-sparse-keymap) "My custom prefix keymap")
(define-key global-map (kbd "C-.") my-prefix-map)

(define-key my-prefix-map (kbd ".")   'avy-goto-char-timer)
(define-key my-prefix-map (kbd "C-.") 'avy-goto-char-timer)

(define-key my-prefix-map (kbd ",")   'avy-goto-word-1)
(define-key my-prefix-map (kbd "C-,") 'my:avy-lightning)

(define-key my-prefix-map (kbd "/")   'avy-goto-char-in-line)
(define-key my-prefix-map (kbd "C-/")   'avy-goto-char-in-line)

(define-key my-prefix-map (kbd "c l") 'avy-copy-line)
(define-key my-prefix-map (kbd "c r") 'avy-copy-region)
(define-key my-prefix-map (kbd "g a") 'avy-goto-word-0)
(define-key my-prefix-map (kbd "g c") 'avy-goto-char)
(define-key my-prefix-map (kbd "g l") 'avy-goto-char-in-line)
(define-key my-prefix-map (kbd "g w") 'avy-goto-word-1)
(define-key my-prefix-map (kbd "k l") 'avy-kill-whole-line)
(define-key my-prefix-map (kbd "k r") 'avy-kill-region)
(define-key my-prefix-map (kbd "m l") 'avy-move-line)
(define-key my-prefix-map (kbd "m r") 'avy-move-region)
#+END_SRC
** movement, kbd
#+BEGIN_SRC emacs-lisp
(defvar my-movement-prefix-map (make-sparse-keymap) "My custom movement prefix keymap")
(define-key org-mode-map (kbd "C-,") nil)

(define-key global-map (kbd "C-,") my-movement-prefix-map)

(define-key my-movement-prefix-map (kbd "C-,") 'avy-goto-word-1)
(define-key my-movement-prefix-map (kbd "c") 'my:goto-class)
(define-key my-movement-prefix-map (kbd "m") 'my:goto-member)
(define-key my-movement-prefix-map (kbd "C-k") 'my:prev-method)
(define-key my-movement-prefix-map (kbd "C-l") 'my:next-method)
(define-key my-movement-prefix-map (kbd "b") 'my:buffers)
#+END_SRC
** movement, in Java class, my:prev-method my:next-method
#+BEGIN_SRC emacs-lisp
(defvar regexp-class ".*class.*")
(defvar regexp-member "public.*;\\|protected.*;\\|private.*;")
(defvar regexp-method "public.*(\\|protected.*(\\|private.*(")

(defun my:goto-class ()
  (interactive)
  (beginning-of-buffer)
  (re-search-forward regexp-class nil t)
  (evil-first-non-blank))

(defun my:goto-member ()
  (interactive)
  (beginning-of-buffer)
  (re-search-forward regexp-member nil t)
  (evil-first-non-blank))

(defun my:prev-method ()
  (interactive)
  (beginning-of-line)
  (re-search-backward regexp-method nil t)
  (evil-first-non-blank))

(defun my:next-method ()
  (interactive)
  (end-of-line)
  (re-search-forward regexp-method nil t)
  (evil-first-non-blank))
#+END_SRC
** my:agenda-view
#+BEGIN_SRC emacs-lisp
(defun my:agenda-view ()
  (interactive)
  (org-agenda t "a")
  (org-agenda-day-view)
  (delete-other-windows)
  (org-agenda-redo-all))
#+END_SRC
** my:avy-goto-line
#+BEGIN_SRC emacs-lisp
(defun my:avy-goto-line ()
  (interactive)
  (avy-goto-line)
  (evil-first-non-blank))
(global-set-key (kbd "C-t") 'my:avy-goto-line)
#+END_SRC
** my:backward-copy-word
#+BEGIN_SRC emacs-lisp
(defun my:backward-copy-word ()
  "Copy the word before point."
  (interactive)
  (subword-mode 0)
  (save-excursion
    (let ((end (progn (right-word) (point)))
          (beg (progn (backward-word) (point))))
      (copy-region-as-kill beg end)))
  (subword-mode t))
(global-set-key (kbd "C-c e") 'my:backward-copy-word)
#+END_SRC
** my:change-cursor-color
#+BEGIN_SRC emacs-lisp
(defun my:change-cursor-color ()
  "Change cursor color when switching between evil-mode modes."
  (if (eq evil-state 'emacs)
      (progn (set-cursor-color "red")))
  (if (eq evil-state 'normal)
      (progn (set-cursor-color "green")))
  (if (eq evil-state 'insert)
      (progn (set-cursor-color "red")))
  (if (eq evil-state 'visual)
      (progn (set-cursor-color "yellow")))
  (if (eq evil-state 'operator)
      (progn (set-cursor-color "orange")))
  (if (eq evil-state 'replace)
      (progn (set-cursor-color "royal blue")))
  (if (eq evil-state 'motion)
      (progn (set-cursor-color "blue")))
  (if (bound-and-true-p cua-mode)
      (progn (set-cursor-color "dark turquoise"))))

(add-hook 'post-command-hook 'my:change-cursor-color)
#+END_SRC
** my:copy-line-at-point
#+BEGIN_SRC emacs-lisp
(defun my:copy-line-at-point ()
  "Copy line at point."
  (interactive)
  (save-excursion
    (let ((begin (line-beginning-position))
          (end (line-end-position)))
      (copy-region-as-kill begin end)))
  (message "Copied line."))
(global-set-key (kbd "C-c y") 'my:copy-line-at-point)
#+END_SRC
** my:decrease-font-size
#+BEGIN_SRC emacs-lisp
(defun my:decrease-font-size ()
  (interactive)
  (setq font-size (- font-size 20))
  (set-face-attribute 'default nil :height font-size))
(global-set-key (kbd "C-!") 'my:decrease-font-size)
#+END_SRC
** my:dired-hide-details-mode
#+BEGIN_SRC emacs-lisp
(add-hook 'dired-mode-hook
          (lambda ()
            (define-key dired-mode-map (kbd "b")
                        (lambda () (interactive) (find-alternate-file "..")))))

(defun my:dired-hide-details-mode ()
  "Enable dired-hide-details-mode."
  (dired-hide-details-mode 1))

(add-hook 'dired-mode-hook #'my:dired-hide-details-mode)

(use-package dired-narrow
  :ensure t
  :config
  (bind-key "C-c s" #'dired-narrow-fuzzy))
(require 'dired-narrow)

(setq dired-dwim-target t)
#+END_SRC
** my:dired-projectile-main-folder
#+BEGIN_SRC emacs-lisp
(defun my:dired-projectile-main-folder ()
  (projectile-dired))
#+END_SRC
** my:dired-projectile-search
#+BEGIN_SRC emacs-lisp
(defun my:dired-projectile-search (regexp search-in-subdirs)
  "Use dired-do-find-regexp to search from project root."
  (interactive "sRegexp: \nP")
  (my:dired-projectile-main-folder)
  (dired-up-directory)
  (message regexp)
  (dired-do-find-regexp regexp)
  (delete-other-windows))
#+END_SRC
** my:duplicate-line
#+BEGIN_SRC emacs-lisp
(defun my:duplicate-line ()
  "Duplicate line at point."
  (interactive)
  (move-beginning-of-line 1)
  (kill-line)
  (yank)
  (open-line 1)
  (next-line 1)
  (yank))
(global-set-key (kbd "C-x d") 'my:duplicate-line)
#+END_SRC
** my:find-file-at-point-in-project
#+BEGIN_SRC emacs-lisp
(defun my:find-file-at-point-in-project ()
  "Find file at point in project."
  (interactive)
  (subword-mode 0)
  (save-excursion
    (let ((end (progn (right-word) (point)))
          (beg (progn (backward-word) (point))))
      (copy-region-as-kill beg end)

      (find-file (my:find-file-recursively (projectile-project-root) (concat (current-kill 0) ".java")))))
  (subword-mode t))
(global-set-key (kbd "C-c t") 'my:find-file-at-point-in-project)
#+END_SRC
** my:find-file-recursively
#+BEGIN_SRC emacs-lisp
(defun my:find-file-recursively (directory filename)
  "Recursively search for FILENAME in DIRECTORY and its subdirectories, ignoring hidden files and directories."
  (let ((files (directory-files directory t))
        (result nil))
    (dolist (file files)
      (let ((file-name (file-name-nondirectory file)))
        (unless (string-prefix-p "." file-name)  ; Ignore hidden files/dirs
          (if (file-directory-p file)
              (when (not (member file-name '("." "..")))
                (setq found (my:find-file-recursively file filename))
                (when found
                  (setq result found)))
            (when (string= file-name filename)
              (setq result file))))))
    result))
#+END_SRC
** my:get-filename
#+BEGIN_SRC emacs-lisp
(defun my:get-filename ()
  (interactive)
  (dired-jump)
  (dired-copy-filename-as-kill)
  (kill-this-buffer))
(global-set-key (kbd "C-x y") 'my:get-filename)
#+END_SRC
** my:grep-backward-copy-word-in-project
#+BEGIN_SRC emacs-lisp
(defun my:grep-backward-copy-word-in-project ()
  "Search for a string using vc-git-grep from the project root."
  (interactive)
  (my:backward-copy-word)
  (let ((search-string (current-kill 0)))
    (setq search-string (replace-regexp-in-string "\\s-+" ".*" search-string))
    (project-dired)
    (vc-git-grep search-string "\*" "\*"))
  (quit-window)
  (switch-to-buffer "*grep*")
  (delete-other-windows)
  (beginning-of-buffer))
(global-set-key (kbd "C-c T") 'my:grep-backward-copy-word-in-project)
#+END_SRC
** my:grep-in-project
#+BEGIN_SRC emacs-lisp
(defun my:grep-in-project (search-strings)
  "Search for multiple strings using vc-git-grep and display simplified output."
  (interactive "MEnter search strings (space-separated): ")
  (let* ((search-list (split-string search-strings " " t " "))
         (default-directory (vc-git-root default-directory))
         (grep-command (format "git --no-pager grep -n -E -i --all-match -e %s"
                               (mapconcat 'shell-quote-argument search-list " --and -e ")))
         (grep-buffer-name "*Git Grep Results*"))
    (compilation-start grep-command 'grep-mode
                       (lambda (mode-name)
                         (format "Search: %s" mode-name)))
    (with-current-buffer grep-buffer-name
      (while (search-forward-regexp (rx bol (group (1+ digit)) ":" (group (1+ not-newline)) eol) nil t)
        (replace-match (format "%s:%s" (file-name-nondirectory (match-string 2)) (match-string 1)))))))
(global-set-key (kbd "C-c f") 'my:grep-in-project)
#+END_SRC
** my:grep-in-project2
#+BEGIN_SRC emacs-lisp
(defun my:grep-in-project2 (search-strings)
  "Search for multiple strings using vc-git-grep and display simplified output."
  (interactive "MEnter search strings (space-separated): ")
  (let* ((search-list (split-string search-strings " " t " "))
         (default-directory (vc-git-root default-directory))
         (grep-command (format "git --no-pager grep -n -E -i -e %s"
                               (mapconcat 'shell-quote-argument search-list " -e ")))
         (grep-buffer-name "*Git Grep Results*"))
    (compilation-start grep-command 'grep-mode
                       (lambda (mode-name)
                         (format "Search: %s" mode-name)))
    (with-current-buffer grep-buffer-name
      (while (search-forward-regexp (rx bol (group (1+ digit)) ":" (group (1+ not-newline)) eol) nil t)
        (replace-match (format "%s:%s" (file-name-nondirectory (match-string 2)) (match-string 1)))))))
(global-set-key (kbd "C-c g") 'my:grep-in-project2)
#+END_SRC
** my:helm-projectile-grep
#+BEGIN_SRC emacs-lisp
(defun my:helm-projectile-grep ()
  "my:helm-projectile-grep"
  (interactive)
  (helm-projectile-grep))
#+END_SRC
** my:helm-xml-tags
#+BEGIN_SRC emacs-lisp
(require 'helm)
(defun my:helm-xml-tags ()
  (interactive)
  (with-helm-default-directory default-directory
    (helm :sources
          (helm-build-sync-source "XML Tags"
            :candidates
            (save-excursion
              (goto-char (point-min))
              (let (tags)
                (while (re-search-forward "<\\([^/!?][^ >]+\\)\\s-?[^>]*>" nil t)
                  (push (match-string 1) tags))
                (reverse tags)))
            :action (helm-make-actions
                     "Jump to Tag" (lambda (candidate)
                                     (goto-char (point-min))
                                     (search-forward (format "<%s" candidate))))
            :fuzzy-match t)
          :buffer "*helm XML Tags*")))
(defun my:setup-xml-mode-keybindings ()
  (define-key nxml-mode-map (kbd "C-9") 'my:helm-xml-tags))
(add-hook 'nxml-mode-hook 'my:setup-xml-mode-keybindings)
#+END_SRC
** my:increase-font-size
#+BEGIN_SRC emacs-lisp
(defun my:increase-font-size ()
  (interactive)
  (setq font-size (+ font-size 20))
  (set-face-attribute 'default nil :height font-size))
(global-set-key (kbd "C-@") 'my:increase-font-size)
#+END_SRC
** my:insert-string-to-mode-line-and-clipboard
#+BEGIN_SRC emacs-lisp
(defun my:insert-string-to-mode-line-and-clipboard ()
  "Prompt for a string and copy it to the clipboard."
  (interactive)
  (let ((user-input (read-string "Search for: ")))
    (setq-default mode-line-format (list " " user-input " " mode-line-format))
    (with-temp-buffer
      (insert user-input)
      (clipboard-kill-region (point-min) (point-max)))))
#+END_SRC
** my:magit-log
#+BEGIN_SRC emacs-lisp
(defun my:magit-log ()
  (interactive)
  (magit-log-current nil nil nil)
  (delete-other-windows))
(global-set-key (kbd "C-c L") 'my:magit-log)
#+END_SRC
** my:mark-curly-brace-region
#+BEGIN_SRC emacs-lisp
(defun my:mark-curly-brace-region ()
  "Mark and select the region between the opening and closing curly braces."
  (interactive)
  (let ((original-point (point)))
    (when (search-backward "{" nil t)
      (let ((start-point (point)))
        (when (search-forward "}" nil t)
          (let ((end-point (point)))
            (transient-mark-mode 1)
            (set-mark start-point)
            (goto-char end-point)
            (message "Region marked and selected between curly braces")))))))
#+END_SRC
** my:message
#+BEGIN_SRC emacs-lisp
(defun my:message (arg)
  "test"
  (interactive "P")
  (clipboard-kill-ring-save arg))
#+END_SRC
** my:new-line
#+BEGIN_SRC emacs-lisp
(defun my:new-line ()
  (interactive)
  (move-end-of-line nil)
  (newline)
  (c-indent-line-or-region))
(global-set-key (kbd "C-c n") 'my:new-line)
#+END_SRC
** my:next-java-method my:prev-java-method
#+BEGIN_SRC emacs-lisp
(defvar java-function-regexp
  (concat
   "^[ \t]*"                                   ;; leading white space
   "\\(public\\|private\\|protected\\|"        ;; some of these 8 keywords
   "abstract\\|final\\|static\\|"
   "synchronized\\|native"
   "\\|override"                               ;; C# support
   "\\|[ \t\n\r]\\)*"                          ;; or whitespace
   "[a-zA-Z0-9_$]+"                            ;; return type
   "[ \t\n\r]*[[]?[]]?"                        ;; (could be array)
   "[ \t\n\r]+"                                ;; whitespace
   "\\([a-zA-Z0-9_$]+\\)"                      ;; the name we want!
   "[ \t\n\r]*"                                ;; optional whitespace
   "("                                         ;; open the param list
   "\\([ \t\n\r]*"                             ;; optional whitespace
   "\\<[a-zA-Z0-9_$]+\\>"                      ;; typename
   "[ \t\n\r]*[[]?[]]?"                        ;; (could be array)
   "[ \t\n\r]+"                                ;; whitespace
   "\\<[a-zA-Z0-9_$]+\\>"                      ;; variable name
   "[ \t\n\r]*[[]?[]]?"                        ;; (could be array)
   "[ \t\n\r]*,?\\)*"                          ;; opt whitespace and comma
   "[ \t\n\r]*"                                ;; optional whitespace
   ")"                                         ;; end the param list
   ))

(defun my:next-java-method ()
  "Jump to next Java method."
  (interactive)
  (re-search-forward java-function-regexp nil t)
  (end-of-line)
  (recenter))
(global-set-key (kbd "C-c 4") 'my:next-method)

(defun my:prev-java-method ()
  "Jump to previous Java method."
  (interactive)
  (re-search-backward java-function-regexp nil t)
  (beginning-of-line)
  (recenter))
(global-set-key (kbd "C-c 5") 'my:next-method)
#+END_SRC
** my:next-link-center
#+BEGIN_SRC emacs-lisp
(defun my:next-link-center ()
  (interactive)
  (Info-next-reference)
  (recenter))
#+END_SRC
** my:prev-curly-brace my:curly-brace
#+BEGIN_SRC emacs-lisp
(defvar next-curly-brace-regexp "{\\|}")

(defun my:prev-curly-brace ()
  (interactive)
  (re-search-backward next-curly-brace-regexp nil t))
(global-set-key (kbd "C-{") 'my:prev-curly-brace)

(defun my:next-curly-brace ()
  (interactive)
  (re-search-forward next-curly-brace-regexp nil t))
(global-set-key (kbd "C-}") 'my:next-curly-brace)
#+END_SRC
** my:previous-link-center
#+BEGIN_SRC emacs-lisp
(defun my:previous-link-center ()
  (interactive)
  (Info-prev-reference)
  (recenter))
#+END_SRC
** my:projectile-ibuffer
#+BEGIN_SRC emacs-lisp
(defun my:projectile-ibuffer ()
  (interactive)
  (projectile-ibuffer nil)
  (delete-other-windows))
#+END_SRC
** my:projectile-magit
#+BEGIN_SRC emacs-lisp
(defun my:projectile-magit ()
  (interactive)
  (projectile-vc)
  (delete-other-windows))
(global-set-key (kbd "C-c v") 'my:projectile-magit)
#+END_SRC
** my:reset-font-size
#+BEGIN_SRC emacs-lisp
(defun my:reset-font-size ()
  (interactive)
  (setq font-size default-font-size)
  (set-face-attribute 'default nil :height font-size))
(global-set-key (kbd "C-S-o") 'my:reset-font-size)
#+END_SRC
** my:select-line
#+BEGIN_SRC emacs-lisp
(defun my:select-line ()
  "Select line at point."
  (interactive)
  (evil-first-non-blank)
  (set-mark (line-end-position)))
(global-set-key (kbd "C-c k l") 'my:select-line)
#+END_SRC
** my:show-projects
#+BEGIN_SRC emacs-lisp
(defun my:show-projects ()
  (interactive)
  (switch-to-buffer "*projects*")
  (mark-whole-buffer)
  (cua-delete-region)
  (org-mode)
  (insert "#+TITLE: Projects\n\n")
  (dolist (project (projectile-relevant-known-projects))
    (insert (concat "* " " [[" project "]] " "\n")))
  (goto-char (point-min)))
#+END_SRC
** my:start
#+BEGIN_SRC emacs-lisp
(defun my:start ()
  "test"
  (interactive)
  (let ((input (read-from-minibuffer "Search for: ")))
    (my:message input)))
#+END_SRC
** my:start-screen
#+BEGIN_SRC emacs-lisp
(defun my:start-screen ()
  (interactive)
  (my:agenda-view)
  (org-agenda-redo-all)
  (split-window-below)
  (my:show-projects))
#+END_SRC
** my:toggle-menu-bar-tool-bar
#+BEGIN_SRC emacs-lisp
(defun my:toggle-menu-bar-tool-bar ()
  "Toggle menu-bar and tool-bar."
  (interactive)
  (if (bound-and-true-p tool-bar-mode)
      (progn (tool-bar-mode 0) (menu-bar-mode 0))
    (progn (tool-bar-mode 1) (menu-bar-mode 1))))
#+END_SRC
** my:toggle-fringe
#+BEGIN_SRC emacs-lisp
(defun my:toggle-fringe ()
  (if (eq mode-line-fringe -1)
      (progn (fringe-mode '(0 . 0))
             (setq my:fringe 0))
    (progn (fringe-mode '(20 . 20))
           (setq my:fringe 1))))
#+END_SRC
** my:toggle-mode-line-fringe
#+BEGIN_SRC emacs-lisp
(defun my:toggle-mode-line-fringe ()
  "Toggle mode line and fringe."
  (interactive)
  (if (eq mode-line-fringe t)
      (progn
        (setq mode-line-fringe -1))
    (progn
      (setq mode-line-fringe t)))

  (if (eq mode-line-fringe t)
      (global-hide-mode-line-mode -1)
    (global-hide-mode-line-mode t))
  (my:toggle-fringe))
#+END_SRC
** my:trim-whitespace
#+BEGIN_SRC emacs-lisp
(defun my:trim-whitespace ()
  "Trim whitespace."
  (interactive)
  (save-excursion
    (let ((begin (line-beginning-position))
          (end (line-end-position)))
      (whitespace-cleanup-region begin end))))
(global-set-key (kbd "C-x t") 'my:trim-whitespace)
#+END_SRC
** my:yank-and-search
#+BEGIN_SRC emacs-lisp
(defun my:yank-and-search ()
  "test"
  (interactive)
  (let ((search-text (clipboard-yank)))
    (helm-grep-do-git-grep search-text)))

(global-set-key (kbd "C-c d") 'my:insert-string-to-mode-line-and-clipboard)
#+END_SRC
** my:yank-line-at-point
#+BEGIN_SRC emacs-lisp
(defun my:yank-line-at-point ()
  "Yank line at point."
  (interactive)
  (fixup-whitespace)
  (yank)
  (c-indent-line-or-region)
  (message "Yanked line."))
(global-set-key (kbd "C-c u") 'my:yank-line-at-point)
#+END_SRC
** my:buffers-list
#+BEGIN_SRC emacs-lisp
(defun my:buffers-list ()
  "Display a list of buffers alphabetically (excluding those starting with '*') and open the selected buffer."
  (interactive)
  (let ((buffers (mapcar #'buffer-name (buffer-list))))
    ;; Exclude buffers starting with '*'
    (setq buffers (seq-filter (lambda (buf) (not (string-prefix-p "*" buf))) buffers))
    ;; Sort the remaining buffers alphabetically
    (setq buffers (sort buffers #'string<))
    (let ((chosen-buffer (completing-read "Select buffer: " buffers)))
      (when chosen-buffer
        (switch-to-buffer chosen-buffer)))))
#+END_SRC
** my:buffers
#+BEGIN_SRC emacs-lisp
(setq bs-attributes-list
   '(("" 1 1 left bs--get-marked-string)
     ("M" 1 1 left bs--get-modified-string)
     ("R" 2 2 left bs--get-readonly-string)
     ("Buffer" bs--get-name-length 10 left bs--get-name)))

(defun my:buffers ()
  "Display buffer list of buffers pointing to files"
  (interactive)
  (bs-show nil)
  (delete-other-windows))
  ;(evil-emacs-state)
#+END_SRC
** org mode
#+BEGIN_SRC emacs-lisp
(setq org-directory "~/source/org-mode/")
(setq org-default-notes-file (concat org-directory "/org-capture.org"))
(global-set-key (kbd "C-c a") 'org-agenda)
(global-set-key (kbd "C-c c") 'org-capture)
(global-set-key (kbd "C-c s") 'org-schedule)
(global-set-key (kbd "C-c l") 'org-store-link)
(global-set-key (kbd "C-c o") 'org-switchb)

(load (concat EMACS-HOME "agenda"))

(setq org-priority-faces '((?A . (:foreground "white" :background "red3"        :weight 'bold))
                           (?B . (:foreground "white" :background "DarkOrange1" :weight 'bold))
                           (?C . (:foreground "white" :background "green4"      :weight 'bold))))

(setq org-startup-folded 'showeverything)

(setq org-support-shift-select 'always)
(setq org-todo-keywords '((sequence "TODO" "IN-PROGRESS" "|" "DONE")))
(setq org-tags-column 0)
(setq org-adapt-indentation nil)

(setq org-edit-src-content-indentation 0)
(setq org-src-preserve-indentation t)

(setq org-latex-pdf-process '("latexmk -f -pdf %f"))

(setq org-image-actual-width (list 500))

(setq org-agenda-custom-commands '(
                                   ("y" "Yearly Overview" agenda "" (
                                                                     (org-agenda-span 'year)
                                                                     (org-agenda-time-grid nil)
                                                                     (org-agenda-show-all-dates nil)
                                                                     (org-agenda-entry-types '(:deadline))
                                                                     (org-deadline-warning-days 0)))))

(setq org-publish-project-alist
      '(("org-mode-notes-emacs"
         :base-directory "~/source/org-mode/notes/emacs/"
         :base-extension "org"
         :publishing-directory "~/publish/emacs/"
         :recursive t
         :publishing-function org-html-publish-to-html
         :headline-levels 4
         :auto-preamble t)

        ("org-mode-notes-emacs-static"
         :base-directory "~/source/org-mode/notes/emacs/"
         :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|swf"
         :publishing-directory "~/publish/emacs/"
         :recursive t
         :publishing-function org-publish-attachment)

        ("org-mode-notes-development"
         :base-directory "~/source/org-mode/notes/development/"
         :base-extension "org"
         :publishing-directory "~/publish/development/"
         :recursive t
         :publishing-function org-html-publish-to-html
         :headline-levels 4
         :auto-preamble t)

        ("org-mode-notes-development-static"
         :base-directory "~/source/org-mode/notes/development/"
         :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|swf"
         :publishing-directory "~/publish/development/"
         :recursive t
         :publishing-function org-publish-attachment)

        ("org" :components ("org-mode-notes-emacs"
                            "org-mode-notes-emacs-static"
                            "org-mode-notes-development"
                            "org-mode-notes-development-static"))))
#+END_SRC
** org mode colors
#+BEGIN_SRC emacs-lisp
(setq org-emphasis-alist
  '(("*" (bold :foreground "Orange"))
    ("/" (italic :foreground "Orange"))
    ("_" (underline :foreground "Orange"))
    ("=" (:foreground "Black" :background "Orange"))
    ("~" (:foreground "Black" :background "SpringGreen1"))
    ("+" (:strike-through t :foreground "SpringGreen1"))))
#+END_SRC

*bold*
/italic/
_underline_
=kjh=
~kjhkjh~
+sdflkjsdf+
** projectile
#+BEGIN_SRC emacs-lisp
(use-package projectile)

(unless (package-installed-p 'projectile)
  (package-install 'projectile))

(require 'projectile)
(setq projectile-indexing-method 'alien)
(projectile-global-mode)
(projectile-mode t)
(global-set-key (kbd "C-x p") 'helm-projectile-switch-project)
(global-set-key (kbd "C-x o") 'helm-projectile-find-file)
(global-set-key (kbd "C-~") 'helm-projectile-switch-to-buffer)

(global-set-key (kbd "C-t") 'counsel-projectile-switch-to-buffer)
(global-set-key (kbd "C-p") 'counsel-projectile-switch-project)

(define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
#+END_SRC
** rainbow-mode
#+BEGIN_SRC emacs-lisp
(use-package rainbow-mode)
(require 'rainbow-mode)
(add-hook 'emacs-lisp-mode-hook 'rainbow-mode)
#+END_SRC
** shx
#+BEGIN_SRC emacs-lisp
(shx-global-mode 1)
#+END_SRC
** swiper
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-s") 'swiper)
(global-set-key (kbd "M-s a") 'swiper-all)
#+END_SRC
** themes
#+BEGIN_SRC emacs-lisp
(setq INDEX-DEFAULT            1)
(setq INDEX-ECLIPSE            2)
(setq INDEX-NEON               3)
(setq INDEX-YELLOW             4)
(setq INDEX-PALETTE            5)
(setq INDEX-GRAY               6)
(setq INDEX-RED                7)
(setq INDEX-HIGH-CONTRAST      8)
(setq INDEX-COLOR-CHANGE-LIGHT 9)
(setq INDEX-COLOR-CHANGE-DARK 10)

(defvar chiaroscuro-index 0 "Index representing the current theme")
(setq chiaroscuro-index 0)

(setq themes-list '(chiaroscuro
                    chiaroscuro
                    chiaroscuro
                    chiaroscuro
                    chiaroscuro
                    chiaroscuro
                    chiaroscuro
                    chiaroscuro
                    chiaroscuro
                    chiaroscuro))

(setq themes-list-names '("default"
                          "eclipse"
                          "neon"
                          "yellow"
                          "palette"
                          "gray"
                          "red"
                          "high contrast"
                          "light"
                          "dark"))

(defvar theme-index 0 "Index representing the current theme")
(setq number-of-themes (length themes-list))

(defun my:disable-themes ()
  (interactive)
  (setq loop-index 0)
  (while (< loop-index number-of-themes)
    (disable-theme (nth loop-index themes-list))
    (setq loop-index (+ loop-index 1))))

(defun my:reset-themes-index ()
  (interactive)
  (setq theme-index 0)
  (setq INDEX-CHIAROSCURO 0)
  (my:disable-themes))

(defun my:loop ()
  (interactive)
  (setq loop-index 1)
  (setq themes-list-index 0)
  (while (<= loop-index number-of-themes)
    (if (eq theme-index loop-index)
        (progn
          (load-theme (nth themes-list-index themes-list) t)
          (message "%s" (nth themes-list-index themes-list-names))))
    (setq loop-index (+ loop-index 1))
    (setq themes-list-index (+ themes-list-index 1))))

(defun my:toggle-themes ()
  (interactive)
  (my:disable-themes)

  (if (eq theme-index -1)
      (progn (setq theme-index number-of-themes)))

  (if (eq theme-index 0)
      (progn (message "emacs")
             (setq theme-index 0)
             (setq INDEX-CHIAROSCURO 0)))

  (my:loop)

  (if (> theme-index number-of-themes)
      (progn (message "emacs")
             (setq theme-index 0)
             (setq INDEX-CHIAROSCURO 0))))

(defun my:theme-down ()
  (interactive)
  (setq theme-index (- theme-index 1))
  (setq INDEX-CHIAROSCURO (- INDEX-CHIAROSCURO 1))
  (my:toggle-themes))
(global-set-key (kbd "C-x 6") 'my:theme-down)

(defun my:theme-up ()
  (interactive)
  (setq theme-index (+ theme-index 1))
  (setq INDEX-CHIAROSCURO (+ INDEX-CHIAROSCURO 1))
  (my:toggle-themes))

(defun my:set-theme (index)
  (interactive)
  (setq theme-index index)
  (setq INDEX-CHIAROSCURO index)
  (my:toggle-themes))
#+END_SRC
** which-key
#+BEGIN_SRC emacs-lisp
(which-key-mode t)
#+END_SRC
** winner mode
#+BEGIN_SRC emacs-lisp
(when (fboundp 'winner-mode)
  (winner-mode t))
#+END_SRC
** Yasnippet
#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :config (yas-global-mode))
(use-package yasnippet-snippets
  :ensure t)
(setq yas-snippet-dirs '("~/.emacs.d/snippets"))
(global-set-key (kbd "C-c j") 'yas-insert-snippet)
#+END_SRC
** treemacs
#+BEGIN_SRC emacs-lisp
(use-package treemacs  
  :ensure t  
  :defer t  
  :config  
  (progn  
   	(setq treemacs-no-png-images t)  
   	(setq treemacs-icon-fallback-text (propertize "> " 'face 'font-lock-keyword-face)))  
  :bind  
  (:map global-map  
   		([f8] . treemacs)))  
(use-package treemacs-projectile  
  :after treemacs projectile  
  :defer t  
  :ensure t)
#+END_SRC
** encoding, compilation, color formatting
https://www.reddit.com/r/emacs/comments/6q644o/how_to_fix_maven_compilation_output/
Add color formatting to *compilation* buffer
#+BEGIN_SRC emacs-lisp
(add-hook 'compilation-filter-hook
          (lambda () (ansi-color-apply-on-region (point-min) (point-max))))
#+END_SRC
** abbrev
#+BEGIN_SRC emacs-lisp
(clear-abbrev-table global-abbrev-table)

(define-abbrev-table 'global-abbrev-table
  '(
    ("c" "class")
    ("d" "double")
    ("f" "for (int i; i < x; i++) {")
    ("g" "String")
    ("i" "int")
    ("pri" "private")
    ("pro" "protected")
    ("pub" "public")
    ("s" "static")
    ("str" "String")
    ("v" "void")
    ("w" "while")
    ))
#+END_SRC
String  String 
** zzz os specific settings
Load emacs-lisp file for linux or windows.
Load emacs-lisp file for custom changes.
#+BEGIN_SRC emacs-lisp
(cond
 ((eq system-type 'gnu/linux) (load (concat EMACS-HOME "linux")))
 ((eq system-type 'windows-nt) (load (concat EMACS-HOME "windows")))
 (t (load-library "default")))
(load (concat EMACS-HOME "custom"))
#+END_SRC

* emacs
** notes
#+BEGIN_SRC emacs-lisp
;  ______     __    __     ______     ______     ______
; /\  ___\   /\ "-./  \   /\  __ \   /\  ___\   /\  ___\
; \ \  __\   \ \ \-./\ \  \ \  __ \  \ \ \__/_  \ \___  \
;  \ \_____\  \ \_\ \ \_\  \ \_\ \_\  \ \_____\  \/\_____\
;   \/_____/   \/_/  \/_/   \/_/\/_/   \/_____/   \/_____/

#+END_SRC
ag
ag -g . | ag 'foo'
ag 'foo'

ag
clang-format
company
counsel-jq
dired-narrow
dired-quick-sort
dired-rainbow
dired-subtree
emms
engine-mode
expand-region
fountain-mode
helm
helm-ag
helm-gtags
helm-projectile
helm-swoop
imenu-list
magit
magit-find-file
move-text
neotree
paredit
pdf-tools
popper
powershell
projectile
projectile-codesearch
prolog
solarized-theme
spray
yasnippet
** package archives
#+BEGIN_SRC emacs-lisp
(require 'package)

(setq package-archives '(("melpa" . "https://melpa.org/packages/")
                         ("elpa" . "https://elpa.gnu.org/packages/")
                         ("org" . "https://orgmode.org/elpa/")
                        )
)

;"melpa-edge" "https://melpa.org/packages/"
;"melpa-stable" "https://stable.melpa.org/packages/"
#+END_SRC
** package initialize
#+BEGIN_SRC emacs-lisp
; Initialize
(package-initialize)

; Refresh available packages
(unless package-archive-contents (package-refresh-contents))

; Install use-package
(setq package-list '(use-package
                     dired-quick-sort
                     helm-swoop
                     magit
                     magit-find-file
                     dired-narrow
                     openwith
                     projectile
                     powershell
                     csharp-mode
                     solarized-theme
                     dark-mint-theme
                     doom-themes
                     eclipse-theme
                     grayscale-theme
                     base16-theme
                     vs-light-theme
                     alect-themes
                     goto-last-change
                     move-text
                     rebecca-theme
                     nov
                     autumn-light-theme
                     cloud-theme
                     afternoon-theme
                     gandalf-theme
                     elfeed
                     )
)
(dolist (package package-list)
(unless (package-installed-p package) (package-install package)))
#+END_SRC
** environment setup
Load environment variables properly by installing =exec-path-from-shell=.
#+BEGIN_SRC emacs-lisp
(use-package exec-path-from-shell :ensure t)
(exec-path-from-shell-initialize)
#+END_SRC
** os specific settings
#+BEGIN_SRC emacs-lisp
(cond
  ((eq system-type 'windows-nt) (load (concat EMACS_HOME "windows")))
  ((eq system-type 'gnu/linux) (load (concat EMACS_HOME "linux")))
  (t (load-library "default"))
)
#+END_SRC
** install missing packages
#+BEGIN_SRC emacs-lisp
; install missing packages
;(dolist (p package-list)
;  (unless (package-installed-p p)
;    (package-refresh-contents)
;    (package-install p))
;  (add-to-list 'package-selected-packages p))
#+END_SRC
** look
#+BEGIN_SRC emacs-lisp
; disable menu bar
(menu-bar-mode -1)

; disable tool bar
(tool-bar-mode -1)

; disable scroll bar
(scroll-bar-mode -1)

; setup cache folder to prevent temporary files to clutter projects
(setq user-cache-directory (concat EMACS_HOME "cache"))
(setq backup-directory-alist `(("." . ,(expand-file-name "backups" user-cache-directory)))
      url-history-file (expand-file-name "url/history" user-cache-directory)
      auto-save-list-file-prefix (expand-file-name "auto-save-list/.saves-" user-cache-directory)
      projectile-known-projects-file (expand-file-name "projectile-bookmarks.eld" user-cache-directory))

; set cursor color for multiple frames
;(add-to-list 'default-frame-alist '(cursor-color . "#00ff00"))
(setq blink-cursor-blinks 0)

(global-hl-line-mode)
;(set-face-background 'highlight "#007700")
;(set-face-attribute hl-line-face nil :underline nil)
;(set-face-foreground 'highlight nil)
;(set-face-underline-p 'highlight t)

; 4 spaces indentation
(setq c-default-style "linux" c-basic-offset 4)

; disable tabs
(setq-default indent-tabs-mode nil)
(setq-default tab-width 4)

; clock
(display-time)

; ask for y/n instead of yes/no
(fset 'yes-or-no-p 'y-or-n-p)

; confirm before closing emacs
(setq confirm-kill-emacs 'y-or-n-p)

; font size
(cond
    ((string-equal system-type "windows-nt")
        (progn
            (set-face-attribute 'default nil :height 150)
        )
    )
    ((string-equal system-type "gnu/linux")
        (progn
            (set-face-attribute 'default nil :font "DejaVu Sans Mono-20")
        )
    )
)

(setq display-line-numbers-type 'relative)
#+END_SRC
** themes
#+BEGIN_SRC emacs-lisp
(setq themes-list '(
eclipse
vs-light
dark-mint
doom-zenburn
doom-gruvbox
alect-light-alt
grayscale
base16-icy
base16-atelier-dune
rebecca
alect-black-alt
base16-3024
base16-circus
base16-darkviolet
base16-apathy
base16-atelier-dune-light
doom-laserwave
tron-legacy
base16-bespin
base16-atelier-sulphurpool
base16-pico
base16-pop
base16-vulcan
doom-homage-black
doom-outrun-electric
doom-spacegrey
autumn-light
cloud
afternoon
gandalf
base16-redscreen
doom-manegarm
base16-red2screen
base16-greenscreen
coolman
))

(defvar theme-index 0 "Index representing the current theme")
(setq theme-index 0)
(setq number-of-themes (length themes-list))

(defun my:disable-themes()
  (interactive)
  (setq loop-index 0)
  (while (< loop-index number-of-themes)
      (disable-theme (nth loop-index themes-list))
      (setq loop-index (+ loop-index 1))
  )
)

(defun my:reset-themes-index()
  (interactive)
  (setq theme-index 0)
  (my:disable-themes)
)
(global-set-key (kbd "C-5") 'my:reset-themes-index)

(defun my:theme-down()
  (interactive)
  (setq theme-index (- theme-index 1))
  (my:toggle-themes)
)
(global-set-key (kbd "C-6") 'my:theme-down)

(defun my:theme-up()
  (interactive)
  (setq theme-index (+ theme-index 1))
  (my:toggle-themes)
)
(global-set-key (kbd "C-7") 'my:theme-up)
(global-set-key (kbd "C-`") 'my:theme-up)

(defun my:loop()
  (interactive)
  (setq loop-index 1)
  (setq themes-list-index 0)
  (while (<= loop-index number-of-themes)
      (if (eq theme-index loop-index)
          (progn
              (load-theme (nth themes-list-index themes-list) t)
              (message "%s" (nth themes-list-index themes-list))
          )
      )
      (setq loop-index (+ loop-index 1))
      (setq themes-list-index (+ themes-list-index 1))
  )
)

(defun my:toggle-themes()
  (interactive)
  (my:disable-themes)

  (if (eq theme-index -1)
      (progn
          (setq theme-index number-of-themes)
      )
  )

  (if (eq theme-index 0)
      (progn
          (message "emacs")
      )
  )

  (my:loop)

  (if (> theme-index number-of-themes)
      (progn
          (setq theme-index 0)
          (message "emacs")
      )
  )
)
#+END_SRC
** behavior
#+BEGIN_SRC emacs-lisp
(cua-mode t)

; scrolling up and down one line
(global-set-key (kbd "C-<down>") 'scroll-up-line)
(global-set-key (kbd "C-<up>") 'scroll-down-line)

; move text up/down
(global-set-key (kbd "M-<down>") 'move-text-down)
(global-set-key (kbd "M-<up>") 'move-text-up)

; change window size
(global-set-key (kbd "C-1") 'enlarge-window-horizontally)
(global-set-key (kbd "C-2") 'shrink-window-horizontally)
(global-set-key (kbd "C-3") 'enlarge-window)
(global-set-key (kbd "C-4") 'shrink-window)

; do not create backup files
(setq make-backup-files nil)

; switch split buffers
(global-set-key (kbd "M-o") 'other-window)
(windmove-default-keybindings)

; disable bell
(setq ring-bell-function 'ignore)

; set language environment to UTF-8
(set-language-environment "UTF-8")
(set-default-coding-systems 'utf-8)

; go to last change
(global-set-key (kbd "C-x q") 'goto-last-change)

; highlight opening and closing parenthesis
(show-paren-mode t)
(setq show-paren-style 'expression)
#+END_SRC
** org mode
#+BEGIN_SRC emacs-lisp
(setq org-directory "~/source/org-mode/")
(setq org-default-notes-file (concat org-directory "/org-capture.org"))
(global-set-key (kbd "C-c a") 'org-agenda)
(global-set-key (kbd "C-c c") 'org-capture)
(global-set-key (kbd "C-c s") 'org-schedule)
(global-set-key (kbd "C-c l") 'org-store-link)
(global-set-key (kbd "C-c b") 'org-switchb)
(setq org-capture-templates
      '(
        ("t" "Tasks" entry (file+headline "~/source/org-mode/tasks.org" "Tasks")
         "* TODO %?\n")
        ("j" "Journal" entry (file+headline "~/source/org-mode/journal.org" "Journal")
         "* %?\n")
        ("l" "Log" entry (file+datetree "~/source/org-mode/log.org")
         "* %?\nEntered on %U\n  %i\n  %a")
       )
)

(setq org-agenda-files (list "~/source/org-mode/tasks.org"))

; org-mode use shift arrows to change buffer
(add-hook 'org-shiftup-final-hook 'windmove-up)
(add-hook 'org-shiftleft-final-hook 'windmove-left)
(add-hook 'org-shiftdown-final-hook 'windmove-down)
(add-hook 'org-shiftright-final-hook 'windmove-right)
(setq org-support-shift-select 'always)
(setq org-todo-keywords
    '((sequence "TODO" "IN-PROGRESS" "WAITING" "|" "CANCELED" "DONE")))

(setq org-todo-keyword-faces
      '(
        ("TODO" . (:foreground "black" :background "red" :weight bold))
        ("IN-PROGRESS" . (:foreground "green" :background "black" :weight bold))
        ("WAITING" . (:foreground "orange" :background "black" :weight bold))
        ("CANCELED" . (:foreground "gray" :background "black" :weight bold))
        ("DONE" . (:foreground "gray" :background "black" :weight bold))
       )
)
#+END_SRC
** projectile
#+BEGIN_SRC emacs-lisp
(use-package projectile)
(require 'projectile)
(setq projectile-indexing-method 'alien)
(projectile-global-mode)
(projectile-mode +1)
(global-set-key (kbd "C-x p") 'projectile-switch-project)
(global-set-key (kbd "C-x o") 'projectile-find-file)
#+END_SRC
** helm
#+BEGIN_SRC emacs-lisp
(use-package helm
:ensure t
:init
(helm-mode 1)
(progn (setq helm-buffers-fuzzy-matching t))
:bind
(("M-x" . helm-M-x))
(("C-c k r" . helm-show-kill-ring))
(("C-c h" . helm-grep-do-git-grep))
(("C-s" . helm-swoop))
(("C-c b" . helm-buffers-list))
(("C-r" . helm-bookmarks))
(("C-c i" . helm-mini))
(("C-c q" . helm-info)))
#+END_SRC
** dired
#+BEGIN_SRC emacs-lisp
; dired move up folder with "b"
(add-hook 'dired-mode-hook
          (lambda ()
            (define-key dired-mode-map (kbd "b")
              (lambda () (interactive) (find-alternate-file ".."))
              )
          )
)

(global-set-key (kbd "C-c f") 'find-name-dired)

; prevent warning to show on windows machine
; connected with dired-quick-sort
;(cond
; ((string-equal system-type "windows-nt")
;  (progn
;    (setq ls-lisp-use-insert-directory-program t)
;   )
; )
;)
; "S" opens the menu
;(use-package dired-quick-sort)
;(require 'dired-quick-sort)
;(dired-quick-sort-setup)

; open file in dired with eww, shortcut: e
; (define-key dired-mode-map "e" (lambda () (interactive) (eww-open-file (dired-get-file-for-visit))))

(use-package dired-narrow
  :ensure t
  :config
  (bind-key "C-x f" #'dired-narrow)
  ;(bind-key "C-f" #'dired-narrow-fuzzy)
)

;(use-package dired-subtree
;  :ensure t
;  :after dired
;  :config
;  (bind-key "C-c 1" #'dired-subtree-toggle)
;)
#+END_SRC
** popper
#+BEGIN_SRC emacs-lisp
;(require 'popper)
;(setq popper-reference-buffers
;      '("\\*Messages\\*"
;        "\\*scratch\\*"
;        "Output\\*$"
;        "magit:*"
;        dired-mode
;        help-mode
;        "^Calc:"
;        "\\*ielm\\*"
;        "\\*IList\\*"
;        "\\*eshell\\*"
;        "\\*shell\\*"
;        "\\*powershell\\*"
;        compilation-mode))
;(global-set-key (kbd "C-`") 'popper-toggle-latest)
;(global-set-key (kbd "C-~") 'popper-cycle)
;(global-set-key (kbd "C-M-`") 'popper-toggle-type)
;(global-set-key (kbd "C-c k-p") 'kill-latest-popup)
;(popper-mode +1)

;(setq display-buffer-alist '(
;                             ("\\*IList\\*"
;                              (display-buffer-in-side-window)
;                              (side . right)
;                              (window-width . 50)
;                             )
;                             ("\\*Messages\\*"
;                              (display-buffer-in-side-window)
;                              (side . bottom)
;                              (window-height . 100)
;                              )
;                             )
;)

#+END_SRC
** lsp
*** Company
Complete anything aka Company provides auto-completion. Company-capf is enabled by default when you start LSP on a project. You can also invoke ~M-x company-capf~ to enable capf (completion at point function).
#+begin_src emacs-lisp
(use-package company :ensure t)
#+end_src

*** Yasnippet
Yasnippet is a template system for Emacs. It allows you to type abbreviation and complete the associated text.

#+begin_src emacs-lisp
(use-package yasnippet :config (yas-global-mode))
(use-package yasnippet-snippets :ensure t)
#+end_src

E.g. In java mode, if you type ~pr~ and hit ~<TAB>~ it should complete to ~System.out.println("text");~

To create a new snippet you can use ~yas-new-snippet~ command.

*** FlyCheck
FlyCheck checks for errors in code at run-time.
#+begin_src emacs-lisp
(use-package flycheck :ensure t :init (global-flycheck-mode))
#+end_src

*** Dap Mode
Emacs Debug Adapter Protocol aka DAP Mode allows us to debug your program. Below we will integrate ~dap-mode~ with ~dap-hydra~. ~Dap-hydra~ shows keys you can use to enable various options and jump through code at runtime. After we install dap-mode we will also install ~dap-java~.

#+begin_src emacs-lisp
(use-package dap-mode
  :ensure t
  :after (lsp-mode)
  :functions dap-hydra/nil
  :config
  (require 'dap-java)
  :bind (:map lsp-mode-map
         ("<f5>" . dap-debug)
         ("M-<f5>" . dap-hydra))
  :hook ((dap-mode . dap-ui-mode)
    (dap-session-created . (lambda (&_rest) (dap-hydra)))
    (dap-terminated . (lambda (&_rest) (dap-hydra/nil)))))

(use-package dap-java :ensure nil)
#+end_src

*** Treemacs
Treemacs provides UI elements used for LSP UI. Let's install lsp-treemacs and its dependency treemacs. We will also Assign ~M-9~ to show error list.
#+begin_src emacs-lisp
(use-package lsp-treemacs
  :after (lsp-mode treemacs)
  :ensure t
  :commands lsp-treemacs-errors-list
  :bind (:map lsp-mode-map
         ("M-9" . lsp-treemacs-errors-list)))

(use-package treemacs
  :ensure t
  :commands (treemacs)
  :after (lsp-mode))
#+end_src

*** LSP UI
LSP UI is used in various packages that require UI elements in LSP. E.g ~lsp-ui-flycheck-list~ opens a windows where you can see various coding errors while you code. You can use ~C-c l T~ to toggle several UI elements. We have also remapped some of the xref-find functions, so that we can easily jump around between symbols using ~M-.~, ~M-,~ and ~M-?~ keys.

#+begin_src emacs-lisp
(use-package lsp-ui
:ensure t
:after (lsp-mode)
:bind (:map lsp-ui-mode-map
         ([remap xref-find-definitions] . lsp-ui-peek-find-definitions)
         ([remap xref-find-references] . lsp-ui-peek-find-references))
:init (setq lsp-ui-doc-delay 1.5
      lsp-ui-doc-position 'bottom
      lsp-ui-doc-max-width 100
))
#+end_src

Go through this [[https://github.com/emacs-lsp/lsp-ui/blob/master/lsp-ui-doc.el][link]]  to see what other parameters are provided.

*** Helm LSP
Helm-lsp provides various functionality to work with the code. E.g Code actions like adding *getter, setter, toString*, refactoring etc. You can use ~helm-lsp-workspace-symbol~ to find various symbols (classes) within your workspace.

LSP's built in symbol explorer uses ~xref-find-apropos~ to provide symbol navigation. Below we will replace that with helm version. After that you can use ~C-c l g a~ to find workspace symbols in a more intuitive way.

#+begin_src emacs-lisp
(use-package helm-lsp
:ensure t
:after (lsp-mode)
:commands (helm-lsp-workspace-symbol)
:init (define-key lsp-mode-map [remap xref-find-apropos] #'helm-lsp-workspace-symbol))
#+end_src

*** Install LSP Package
Let's install the main package for lsp. Here we will integrate lsp with which-key. This way, when we type the prefix key ~C-c l~ we get additional help for compliting the command.

#+begin_src emacs-lisp
(use-package lsp-mode
:ensure t
:hook (
   (lsp-mode . lsp-enable-which-key-integration)
   (java-mode . #'lsp-deferred)
)
:init (setq
    lsp-keymap-prefix "C-c l"              ; this is for which-key integration documentation, need to use lsp-mode-map
    lsp-enable-file-watchers nil
    read-process-output-max (* 1024 1024)  ; 1 mb
    lsp-completion-provider :capf
    lsp-idle-delay 0.500
)
:config
    (setq lsp-intelephense-multi-root nil) ; don't scan unnecessary projects
    (with-eval-after-load 'lsp-intelephense
    (setf (lsp--client-multi-root (gethash 'iph lsp-clients)) nil))
    (define-key lsp-mode-map (kbd "C-c l") lsp-command-map)
)
#+end_src

You can start LSP server in a java project by using ~C-c l s s~. Once you type ~C-c l~ ~which-key~ package should guide you through rest of the options. In above setting I have added some memory management settings as suggested in [[https://emacs-lsp.github.io/lsp-mode/page/performance/][this guide]]. Change them to higher numbers, if you find *lsp-mode* sluggish in your computer.

*** LSP Java
This is the package that handles server installation and session management.
#+begin_src  emacs-lisp
(use-package lsp-java
:ensure t
:config (add-hook 'java-mode-hook 'lsp))
#+end_src
** magit
(use-package magit)
(use-package magit-find-file)
** nov
#+BEGIN_SRC emacs-lisp
;(add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode))
;(defun my-nov-font-setup ()
;  (face-remap-add-relative 'variable-pitch :family "Liberation Serif"
;                                           :height 1.0))
;(add-hook 'nov-mode-hook 'my-nov-font-setup)
#+END_SRC
** custom functions
#+BEGIN_SRC emacs-lisp
(defun my:duplicate-line()
  (interactive)
  (move-beginning-of-line 1)
  (kill-line)
  (yank)
  (open-line 1)
  (next-line 1)
  (yank)
)

(defun eww-new ()
  (interactive)
  (let ((url (read-from-minibuffer "Enter URL or keywords: ")))
    (switch-to-buffer (generate-new-buffer "eww"))
    (eww-mode)
    (eww url)))

(defvar java-function-regexp
  (concat
   "^[ \t]*"                                   ; leading white space
   "\\(public\\|private\\|protected\\|"        ; some of these 8 keywords
   "abstract\\|final\\|static\\|"
   "synchronized\\|native"
   "\\|override"                               ; C# support
   "\\|[ \t\n\r]\\)*"                          ; or whitespace
   "[a-zA-Z0-9_$]+"                            ; return type
   "[ \t\n\r]*[[]?[]]?"                        ; (could be array)
   "[ \t\n\r]+"                                ; whitespace
   "\\([a-zA-Z0-9_$]+\\)"                      ; the name we want!
   "[ \t\n\r]*"                                ; optional whitespace
   "("                                         ; open the param list
   "\\([ \t\n\r]*"                             ; optional whitespace
   "\\<[a-zA-Z0-9_$]+\\>"                      ; typename
   "[ \t\n\r]*[[]?[]]?"                        ; (could be array)
   "[ \t\n\r]+"                                ; whitespace
   "\\<[a-zA-Z0-9_$]+\\>"                      ; variable name
   "[ \t\n\r]*[[]?[]]?"                        ; (could be array)
   "[ \t\n\r]*,?\\)*"                          ; opt whitespace and comma
   "[ \t\n\r]*"                                ; optional whitespace
   ")"                                         ; end the param list
))
(defun my:next-java-method()
  (interactive)
  (re-search-forward java-function-regexp nil t)
  (recenter)
)
(defun my:prev-java-method()
  (interactive)
  (re-search-backward java-function-regexp nil t)
  (recenter)
)

(defun my:jump-ten-lines()
  (interactive)
  (next-line)
  (next-line)
  (next-line)
  (next-line)
  (next-line)
  (next-line)
  (next-line)
  (next-line)
  (next-line)
  (next-line)
)

(defun my:jump-back-ten-lines()
  (interactive)
  (previous-line)
  (previous-line)
  (previous-line)
  (previous-line)
  (previous-line)
  (previous-line)
  (previous-line)
  (previous-line)
  (previous-line)
  (previous-line)
)

(defun my:previous-link-center()
  (interactive)
  (Info-prev-reference)
  (recenter)
)

(defun my:next-link-center()
  (interactive)
  (Info-next-reference)
  (recenter)
)
#+END_SRC
** engine mode
#+BEGIN_SRC emacs-lisp
;(require 'engine-mode)
;(engine-mode t)

;(defengine duckduckgo
;  "https://duckduckgo.com/?q=%s"
;  :keybinding "d")

;(defengine google
;  "http://www.google.com/search?ie=utf-8&oe=utf-8&q=%s"
;  :keybinding "g")

;(defengine google-images
;  "http://www.google.com/images?hl=en&source=hp&biw=1440&bih=795&gbv=2&aq=f&aqi=&aql=&oq=&q=%s"
;  :keybinding "i")

;(defengine google-maps
;  "http://maps.google.com/maps?q=%s"
;  :keybinding "m")

;(defengine stack-overflow
;  "https://stackoverflow.com/search?q=%s"
;  :keybinding "o")

;(defengine wikipedia
;  "http://www.wikipedia.org/search-redirect.php?language=en&go=Go&search=%s"
;  :keybinding "w")

;(defengine youtube
;  "http://www.youtube.com/results?aq=f&oq=&search_query=%s"
;  :keybinding "y")
#+END_SRC
** openwith
#+BEGIN_SRC emacs-lisp
(require 'openwith)
(openwith-mode t)
(setq openwith-associations
      (list (list (openwith-make-extension-regexp '("pdf"))
                  "evince" '(file))
            (list (openwith-make-extension-regexp '("bmp" "jpeg" "jpg" "png"))
                  "gimp" '(file))
            (list (openwith-make-extension-regexp '("avi" "mp3" "mp4" "wav"))
                  "vlc" '(file))
            (list (openwith-make-extension-regexp '("sln"))
                  "C:\\Program Files (x86)\\Microsoft Visual Studio\\2019\\Professional\\Common7\\IDE\\devenv.exe" '(file))
            )
      )
#+END_SRC
** winner mode
#+BEGIN_SRC emacs-lisp
(when (fboundp 'winner-mode)
  (winner-mode 1))
#+END_SRC
** nov (epub)
#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode))
(defun my-nov-font-setup ()
  (face-remap-add-relative 'variable-pitch :family "Liberation Serif"
                                           :height 1.0))
(add-hook 'nov-mode-hook 'my-nov-font-setup)
#+END_SRC
** ido
#+BEGIN_SRC emacs-lisp
(setq ido-enable-flex-matching t)
(ido-mode 1)
#+END_SRC
** clock
#+BEGIN_SRC emacs-lisp
(setq display-time-world-list '(("Europe/Vienna" "Graz")))
#+END_SRC
** elfeed
#+BEGIN_SRC emacs-lisp
(setq elfeed-feeds
      '(
        ("https://rss.orf.at/news.xml" news)
        ("https://www.derstandard.at/rss/web" news)
        ("https://rss.orf.at/steiermark.xml" news graz)
        ("https://www.reddit.com/r/graz/.rss" news graz)
        ("https://en.wikinews.org/w/index.php?title=Special:NewsFeed&feed=atom&categories=Published&notcategories=No%20publish%7CArchived%7CAutoArchived%7Cdisputed&namespace=0&count=30&hourcount=124&ordermethod=categoryadd&stablepages=only" news)
        ("https://chaski.huffpost.com/us/auto/vertical/front-page" news)

        ("https://chaski.huffpost.com/us/auto/vertical/technology" tech)

        ("https://www.reddit.com/r/emacs/.rss" it)
        ("https://www.reddit.com/r/vim/.rss" it)
        ("https://www.reddit.com/r/linux/.rss" it)
        ("https://www.reddit.com/r/programming/.rss" it)
        ("https://www.reddit.com/r/cpp/.rss" it)
        ("https://www.reddit.com/r/java/.rss" it)

        ("https://www.comicsrss.com/rss/dilbert.rss" comic dilbert)
        ("https://www.comicsrss.com/rss/garfield.rss" comic garfield)
        ("https://www.comicsrss.com/rss/peanuts.rss" comic peanuts)
       )
)
#+END_SRC
** key bindings
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "<f10>") 'tmm-menubar)
(global-set-key (kbd "C-x q") 'goto-last-change)
(global-set-key (kbd "C-x l") 'locate)
(global-set-key (kbd "C-x C-b") 'switch-to-buffer)
(global-set-key (kbd "C-<next>") 'next-buffer)
(global-set-key (kbd "C-<prior>") 'previous-buffer)
(global-set-key (kbd "C-c f") 'find-name-dired)
(global-set-key (kbd "C-x g") 'magit-status)
(global-set-key (kbd "C-x p") 'projectile-switch-project)
(global-set-key (kbd "C-x o") 'projectile-find-file)
(global-set-key (kbd "C-c d") 'my:duplicate-line)
(global-set-key (kbd "C-S-<up>") 'my:prev-java-method)
(global-set-key (kbd "C-S-<down>") 'my:next-java-method)
;(global-set-key (kbd "C-n") 'my:jump-ten-lines)
;(global-set-key (kbd "C-p") 'my:jump-back-ten-lines)
(global-set-key (kbd "<C-iso-lefttab>") 'my:previous-link-center)
;(global-set-key (kbd "<C-tab>") 'my:next-link-center)
(global-set-key (kbd "<C-tab>") 'completion-at-point)
(global-set-key (kbd "C-x 7") 'helm-world-time)
;(global-set-key (kbd "C-c p") 'completion-at-point)
;(define-key ac-complete-mode-map "\C-p" 'completion-at-point)
#+END_SRC
